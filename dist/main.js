(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(667),c=t.n(s),d=new URL(t(472),t.b),u=new URL(t(704),t.b),l=i()(a()),f=c()(d),A=c()(u);l.push([e.id,"@font-face {\n    font-family: 'crossaint-one';\n    src: url("+f+");\n    letter-spacing: 2px;\n    font-size: 2.5rem;\n    font-weight: 700;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 16px;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\n\nbody {\n    position: relative;\n    min-height: 100vh;\n    /* overflow-x:hidden; */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-image: url("+A+");\n    background-size: 100vw 200vh;\n}\n\n.navbar {\n    top: 0;\n    width:100%;\n    position: sticky;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(160, 160, 160);\n    height: 6vh;\n    gap: 10vw;\n    padding: 0 10vw;\n    box-sizing: border-box;\n    border-bottom: 2px solid rgba(0, 0, 0, 0.671);\n}\n\n.navItem {\n    font-weight: bold;\n    text-decoration: underline;\n}\n\n#mid {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    align-items: center;\n    box-sizing: border-box;\n    background-color: rgba(41, 123, 218, 0.349);\n    min-height: 50%;\n    width:60%;\n    font-family: 'crossaint-one', sans-serif;\n}\n\n.title {\n    font-size: 4rem;\n    text-align: center;\n    width: 60%;\n    margin-top: 2rem;\n    color: rgba(22, 5, 3, 0.897);\n    -webkit-text-stroke: 6px;\n    -webkit-text-stroke-color: rgba(0, 0, 0, 0.363);\n}\n\n.wrapper {\n    padding: 1rem 2rem;\n    box-sizing:border-box;\n    border-style: solid;\n    border-color: black;\n    border-width: 4px;\n    border-radius: 20px;\n    width: 60%;\n    height:auto;\n    text-align: center;\n}\n\n.article-header {\n    font-family: 'crossaint-one', sans-serif;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,4BAA4B;IAC5B,4CAA4C;IAC5C,mBAAmB;IACnB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;;AAEA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,yDAAqD;IACrD,4BAA4B;AAChC;;AAEA;IACI,MAAM;IACN,UAAU;IACV,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,oCAAoC;IACpC,WAAW;IACX,SAAS;IACT,eAAe;IACf,sBAAsB;IACtB,6CAA6C;AACjD;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,sBAAsB;IACtB,2CAA2C;IAC3C,eAAe;IACf,SAAS;IACT,wCAAwC;AAC5C;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,UAAU;IACV,gBAAgB;IAChB,4BAA4B;IAC5B,wBAAwB;IACxB,+CAA+C;AACnD;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,mBAAmB;IACnB,iBAAiB;IACjB,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,wCAAwC;IACxC,eAAe;IACf,mBAAmB;AACvB",sourcesContent:["@font-face {\n    font-family: 'crossaint-one';\n    src: url('./fonts/CroissantOne-Regular.otf');\n    letter-spacing: 2px;\n    font-size: 2.5rem;\n    font-weight: 700;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 16px;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\n\nbody {\n    position: relative;\n    min-height: 100vh;\n    /* overflow-x:hidden; */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-image: url('./images/cool-restaurant.jpg');\n    background-size: 100vw 200vh;\n}\n\n.navbar {\n    top: 0;\n    width:100%;\n    position: sticky;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(160, 160, 160);\n    height: 6vh;\n    gap: 10vw;\n    padding: 0 10vw;\n    box-sizing: border-box;\n    border-bottom: 2px solid rgba(0, 0, 0, 0.671);\n}\n\n.navItem {\n    font-weight: bold;\n    text-decoration: underline;\n}\n\n#mid {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    align-items: center;\n    box-sizing: border-box;\n    background-color: rgba(41, 123, 218, 0.349);\n    min-height: 50%;\n    width:60%;\n    font-family: 'crossaint-one', sans-serif;\n}\n\n.title {\n    font-size: 4rem;\n    text-align: center;\n    width: 60%;\n    margin-top: 2rem;\n    color: rgba(22, 5, 3, 0.897);\n    -webkit-text-stroke: 6px;\n    -webkit-text-stroke-color: rgba(0, 0, 0, 0.363);\n}\n\n.wrapper {\n    padding: 1rem 2rem;\n    box-sizing:border-box;\n    border-style: solid;\n    border-color: black;\n    border-width: 4px;\n    border-radius: 20px;\n    width: 60%;\n    height:auto;\n    text-align: center;\n}\n\n.article-header {\n    font-family: 'crossaint-one', sans-serif;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},731:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.FORMAT_PLAIN=n.FORMAT_HTML=n.FORMATS=void 0;var t="html";n.FORMAT_HTML=t;var r="plain";n.FORMAT_PLAIN=r;var a=[t,r];n.FORMATS=a},670:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LINE_ENDINGS=void 0,n.LINE_ENDINGS={POSIX:"\n",WIN32:"\r\n"}},3:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SUPPORTED_PLATFORMS=void 0,n.SUPPORTED_PLATFORMS={DARWIN:"darwin",LINUX:"linux",WIN32:"win32"}},755:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.UNIT_WORDS=n.UNIT_WORD=n.UNIT_SENTENCES=n.UNIT_SENTENCE=n.UNIT_PARAGRAPHS=n.UNIT_PARAGRAPH=n.UNITS=void 0;var t="words";n.UNIT_WORDS=t;var r="word";n.UNIT_WORD=r;var a="sentences";n.UNIT_SENTENCES=a;var o="sentence";n.UNIT_SENTENCE=o;var i="paragraphs";n.UNIT_PARAGRAPHS=i;var s="paragraph";n.UNIT_PARAGRAPH=s;var c=[t,r,a,o,i,s];n.UNITS=c},749:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.WORDS=void 0,n.WORDS=["ad","adipisicing","aliqua","aliquip","amet","anim","aute","cillum","commodo","consectetur","consequat","culpa","cupidatat","deserunt","do","dolor","dolore","duis","ea","eiusmod","elit","enim","esse","est","et","eu","ex","excepteur","exercitation","fugiat","id","in","incididunt","ipsum","irure","labore","laboris","laborum","Lorem","magna","minim","mollit","nisi","non","nostrud","nulla","occaecat","officia","pariatur","proident","qui","quis","reprehenderit","sint","sit","sunt","tempor","ullamco","ut","velit","veniam","voluptate"]},380:(e,n,t)=>{Object.defineProperty(n,"Ap",{enumerable:!0,get:function(){return a.default}});t(731),t(755),t(749);var r,a=(r=t(935))&&r.__esModule?r:{default:r}},935:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,a=t(731),o=t(670),i=(r=t(140))&&r.__esModule?r:{default:r},s=t(270);function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.FORMAT_PLAIN,r=arguments.length>2?arguments[2]:void 0;if(function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.format=t,this.suffix=r,function(e,n,t){n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t}(this,"generator",void 0),-1===a.FORMATS.indexOf(t.toLowerCase()))throw new Error("".concat(t," is an invalid format. Please use ").concat(a.FORMATS.join(" or "),"."));this.generator=new i.default(n)}var n,t;return n=e,(t=[{key:"getLineEnding",value:function(){return this.suffix?this.suffix:!(0,s.isReactNative)()&&(0,s.isNode)()&&(0,s.isWindows)()?o.LINE_ENDINGS.WIN32:o.LINE_ENDINGS.POSIX}},{key:"formatString",value:function(e){return this.format===a.FORMAT_HTML?"<p>".concat(e,"</p>"):e}},{key:"formatStrings",value:function(e){var n=this;return e.map((function(e){return n.formatString(e)}))}},{key:"generateWords",value:function(e){return this.formatString(this.generator.generateRandomWords(e))}},{key:"generateSentences",value:function(e){return this.formatString(this.generator.generateRandomParagraph(e))}},{key:"generateParagraphs",value:function(e){var n=this.generator.generateRandomParagraph.bind(this.generator);return this.formatStrings((0,s.makeArrayOfStrings)(e,n)).join(this.getLineEnding())}}])&&c(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),e}(),u=d;n.default=u},140:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(749),a=t(270);function o(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var s=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.sentencesPerParagraph,a=void 0===t?{max:7,min:3}:t,o=n.wordsPerSentence,s=void 0===o?{max:15,min:5}:o,c=n.random,d=(n.seed,n.words),u=void 0===d?r.WORDS:d;if(function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"sentencesPerParagraph",void 0),i(this,"wordsPerSentence",void 0),i(this,"random",void 0),i(this,"words",void 0),a.min>a.max)throw new Error("Minimum number of sentences per paragraph (".concat(a.min,") cannot exceed maximum (").concat(a.max,")."));if(s.min>s.max)throw new Error("Minimum number of words per sentence (".concat(s.min,") cannot exceed maximum (").concat(s.max,")."));this.sentencesPerParagraph=a,this.words=u,this.wordsPerSentence=s,this.random=c||Math.random}var n,t;return n=e,(t=[{key:"generateRandomInteger",value:function(e,n){return Math.floor(this.random()*(n-e+1)+e)}},{key:"generateRandomWords",value:function(e){var n=this,t=this.wordsPerSentence,r=t.min,o=t.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,t){return"".concat(n.pluckRandomWord()," ").concat(e)}),"").trim()}},{key:"generateRandomSentence",value:function(e){return"".concat((0,a.capitalize)(this.generateRandomWords(e)),".")}},{key:"generateRandomParagraph",value:function(e){var n=this,t=this.sentencesPerParagraph,r=t.min,o=t.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,t){return"".concat(n.generateRandomSentence()," ").concat(e)}),"").trim()}},{key:"pluckRandomWord",value:function(){var e=this.words.length-1,n=this.generateRandomInteger(0,e);return this.words[n]}}])&&o(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),e}();n.default=s},827:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(e){var n=e.trim();return n.charAt(0).toUpperCase()+n.slice(1)}},270:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(n,"isNode",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(n,"isReactNative",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"isWindows",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"makeArrayOfLength",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(n,"makeArrayOfStrings",{enumerable:!0,get:function(){return c.default}});var r=d(t(827)),a=d(t(984)),o=d(t(97)),i=d(t(606)),s=d(t(318)),c=d(t(490));function d(e){return e&&e.__esModule?e:{default:e}}},984:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){return!!e.exports}},97:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=!1;try{e="ReactNative"===navigator.product}catch(n){e=!1}return e}},606:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(3);n.default=function(){var e=!1;try{e=process.platform===r.SUPPORTED_PLATFORMS.WIN32}catch(n){e=!1}return e}},318:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Array.apply(null,Array(e)).map((function(e,n){return n}))}},490:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,a=(r=t(318))&&r.__esModule?r:{default:r};n.default=function(e,n){return(0,a.default)(e).map((function(){return n()}))}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var f=t(l),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)n[f].references++,n[f].updater(A);else{var p=a(A,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var u=t(o[d]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},472:(e,n,t)=>{e.exports=t.p+"426bbd6f3affefa7200c.otf"},704:(e,n,t)=>{e.exports=t.p+"1bc31cce4f37f16602d6.jpg"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),d=t(216),u=t.n(d),l=t(589),f=t.n(l),A=t(426),p={};function m(e){let n=document.createElement("div");return n.textContent=e,n.id=e,n.classList.add("navItem"),n}p.styleTagTransform=f(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),n()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;var g=t(380);function h(e){let n=document.createElement("div");return n.className="wrapper",n.appendChild(function(e){let n=document.createElement("h1");return n.className="article-header",n.textContent=e,n}(e)),n.appendChild(function(){const e=new g.Ap({sentencesPerParagraph:{max:8,min:4},wordsPerSentence:{max:16,min:4}});console.log(e.generateParagraphs(1));let n=document.createElement("p");return n.textContent=e.generateParagraphs(1),n}()),n}window.addEventListener("load",(function(){document.querySelector("body").appendChild(function(){let e=document.createElement("div");return e.className="navbar",e.appendChild(m("Home")),e.appendChild(m("Menu")),e.appendChild(m("About")),e}()),document.querySelector("body").appendChild(function(){let e=document.createElement("div");return e.id="mid",e.appendChild(function(e){let n=document.createElement("h1");return n.className="title",n.textContent="Niko & Klonoa's Coffee Tavern",n}()),e.appendChild(h("Get ready to say 'WAHOO!' when you taste our brew!")),e.appendChild(h("Our Story!")),e.appendChild(h("Come check us out!")),e}())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USxFQUFNRyxtQkFBbUIsR0FDckNaLENBQ1gsQ0FNMEJhLElBQ2ZQLENBQ1gsQ0N0QkE1RCxPQUFPb0UsaUJBQWlCLFFBTnhCLFdBQ0l0RSxTQUFTQyxjQUFjLFFBQVFNLFlDSHBCLFdBQ1gsSUFBSWdFLEVBQVN2RSxTQUFTUyxjQUFjLE9BT3BDLE9BTkE4RCxFQUFPUixVQUFZLFNBRW5CUSxFQUFPaEUsWUFBWWdELEVBQVEsU0FDM0JnQixFQUFPaEUsWUFBWWdELEVBQVEsU0FDM0JnQixFQUFPaEUsWUFBWWdELEVBQVEsVUFFcEJnQixDQUNYLENETitDQyxJQUMzQ3hFLFNBQVNDLGNBQWMsUUFBUU0sWUVIcEIsV0FDWCxJQUFJa0UsRUFBTXpFLFNBQVNTLGNBQWMsT0FRakMsT0FQQWdFLEVBQUluUSxHQUFLLE1BRVRtUSxFQUFJbEUsWUNQTyxTQUFlaUQsR0FDMUIsSUFBSWtCLEVBQVExRSxTQUFTUyxjQUFjLE1BS25DLE9BSkFpRSxFQUFNWCxVQUFZLFFBRWxCVyxFQUFNakIsWURHZ0IsZ0NDRGZpQixDQUNYLENEQW9CQSxJQUNoQkQsRUFBSWxFLFlBQVlxRCxFQUFhLHVEQUM3QmEsRUFBSWxFLFlBQVlxRCxFQUFhLGVBQzdCYSxFQUFJbEUsWUFBWXFELEVBQWEsdUJBRXRCYSxDQUNYLENGUCtDRSxHQUMvQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2xvcmVtLWlwc3VtL2Rpc3QvY29uc3RhbnRzL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2xvcmVtLWlwc3VtL2Rpc3QvY29uc3RhbnRzL2xpbmVFbmRpbmdzLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L2NvbnN0YW50cy9wbGF0Zm9ybXMuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2xvcmVtLWlwc3VtL2Rpc3QvY29uc3RhbnRzL3VuaXRzLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L2NvbnN0YW50cy93b3Jkcy5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC9saWIvTG9yZW1JcHN1bS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC9saWIvZ2VuZXJhdG9yLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L3V0aWwvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC91dGlsL2luZGV4LmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L3V0aWwvaXNOb2RlLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L3V0aWwvaXNSZWFjdE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC91dGlsL2lzV2luZG93cy5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvbG9yZW0taXBzdW0vZGlzdC91dGlsL21ha2VBcnJheU9mTGVuZ3RoLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9sb3JlbS1pcHN1bS9kaXN0L3V0aWwvbWFrZUFycmF5T2ZTdHJpbmdzLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL2NvbXBvbmVudHMvbmF2aXRlbS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9zcmMvY29tcG9uZW50cy9hcnRpY2xlLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9zcmMvY29tcG9uZW50cy9uYXZiYXIuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL2NvbXBvbmVudHMvaG9tZXBhZ2UuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL2NvbXBvbmVudHMvaG9tZXBhZ2UtZXhjbHVzaXZlLmpzL3RpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ZvbnRzL0Nyb2lzc2FudE9uZS1SZWd1bGFyLm90ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4vaW1hZ2VzL2Nvb2wtcmVzdGF1cmFudC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnY3Jvc3NhaW50LW9uZSc7XFxuICAgIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDJweDtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTZweDtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmJvZHkge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgICAvKiBvdmVyZmxvdy14OmhpZGRlbjsgKi9cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDB2dyAyMDB2aDtcXG59XFxuXFxuLm5hdmJhciB7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgcG9zaXRpb246IHN0aWNreTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDE2MCwgMTYwKTtcXG4gICAgaGVpZ2h0OiA2dmg7XFxuICAgIGdhcDogMTB2dztcXG4gICAgcGFkZGluZzogMCAxMHZ3O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjY3MSk7XFxufVxcblxcbi5uYXZJdGVtIHtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbn1cXG5cXG4jbWlkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAycmVtO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQxLCAxMjMsIDIxOCwgMC4zNDkpO1xcbiAgICBtaW4taGVpZ2h0OiA1MCU7XFxuICAgIHdpZHRoOjYwJTtcXG4gICAgZm9udC1mYW1pbHk6ICdjcm9zc2FpbnQtb25lJywgc2Fucy1zZXJpZjtcXG59XFxuXFxuLnRpdGxlIHtcXG4gICAgZm9udC1zaXplOiA0cmVtO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHdpZHRoOiA2MCU7XFxuICAgIG1hcmdpbi10b3A6IDJyZW07XFxuICAgIGNvbG9yOiByZ2JhKDIyLCA1LCAzLCAwLjg5Nyk7XFxuICAgIC13ZWJraXQtdGV4dC1zdHJva2U6IDZweDtcXG4gICAgLXdlYmtpdC10ZXh0LXN0cm9rZS1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjM2Myk7XFxufVxcblxcbi53cmFwcGVyIHtcXG4gICAgcGFkZGluZzogMXJlbSAycmVtO1xcbiAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XFxuICAgIGJvcmRlci13aWR0aDogNHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgICB3aWR0aDogNjAlO1xcbiAgICBoZWlnaHQ6YXV0bztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uYXJ0aWNsZS1oZWFkZXIge1xcbiAgICBmb250LWZhbWlseTogJ2Nyb3NzYWludC1vbmUnLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSw0QkFBNEI7SUFDNUIsNENBQTRDO0lBQzVDLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBOzs7Ozs7Ozs7Ozs7O0NBYUMsU0FBUztDQUNULFVBQVU7Q0FDVixTQUFTO0NBQ1QsZUFBZTtDQUNmLGFBQWE7Q0FDYix3QkFBd0I7QUFDekI7O0FBRUEsZ0RBQWdEO0FBQ2hEOztDQUVDLGNBQWM7QUFDZjtBQUNBO0NBQ0MsY0FBYztBQUNmO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix5REFBcUQ7SUFDckQsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksTUFBTTtJQUNOLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsb0NBQW9DO0lBQ3BDLFdBQVc7SUFDWCxTQUFTO0lBQ1QsZUFBZTtJQUNmLHNCQUFzQjtJQUN0Qiw2Q0FBNkM7QUFDakQ7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsMEJBQTBCO0FBQzlCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QiwyQ0FBMkM7SUFDM0MsZUFBZTtJQUNmLFNBQVM7SUFDVCx3Q0FBd0M7QUFDNUM7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsNEJBQTRCO0lBQzVCLHdCQUF3QjtJQUN4QiwrQ0FBK0M7QUFDbkQ7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixVQUFVO0lBQ1YsV0FBVztJQUNYLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHdDQUF3QztJQUN4QyxlQUFlO0lBQ2YsbUJBQW1CO0FBQ3ZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBmb250LWZhY2Uge1xcbiAgICBmb250LWZhbWlseTogJ2Nyb3NzYWludC1vbmUnO1xcbiAgICBzcmM6IHVybCgnLi9mb250cy9Dcm9pc3NhbnRPbmUtUmVndWxhci5vdGYnKTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDJweDtcXG4gICAgZm9udC1zaXplOiAyLjVyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTZweDtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmJvZHkge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgICAvKiBvdmVyZmxvdy14OmhpZGRlbjsgKi9cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuL2ltYWdlcy9jb29sLXJlc3RhdXJhbnQuanBnJyk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwdncgMjAwdmg7XFxufVxcblxcbi5uYXZiYXIge1xcbiAgICB0b3A6IDA7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIHBvc2l0aW9uOiBzdGlja3k7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTYwLCAxNjAsIDE2MCk7XFxuICAgIGhlaWdodDogNnZoO1xcbiAgICBnYXA6IDEwdnc7XFxuICAgIHBhZGRpbmc6IDAgMTB2dztcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC42NzEpO1xcbn1cXG5cXG4ubmF2SXRlbSB7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuI21pZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogMnJlbTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0MSwgMTIzLCAyMTgsIDAuMzQ5KTtcXG4gICAgbWluLWhlaWdodDogNTAlO1xcbiAgICB3aWR0aDo2MCU7XFxuICAgIGZvbnQtZmFtaWx5OiAnY3Jvc3NhaW50LW9uZScsIHNhbnMtc2VyaWY7XFxufVxcblxcbi50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogNHJlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICB3aWR0aDogNjAlO1xcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xcbiAgICBjb2xvcjogcmdiYSgyMiwgNSwgMywgMC44OTcpO1xcbiAgICAtd2Via2l0LXRleHQtc3Ryb2tlOiA2cHg7XFxuICAgIC13ZWJraXQtdGV4dC1zdHJva2UtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4zNjMpO1xcbn1cXG5cXG4ud3JhcHBlciB7XFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTtcXG4gICAgYm94LXNpemluZzpib3JkZXItYm94O1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbiAgICBib3JkZXItd2lkdGg6IDRweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweDtcXG4gICAgd2lkdGg6IDYwJTtcXG4gICAgaGVpZ2h0OmF1dG87XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmFydGljbGUtaGVhZGVyIHtcXG4gICAgZm9udC1mYW1pbHk6ICdjcm9zc2FpbnQtb25lJywgc2Fucy1zZXJpZjtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRk9STUFUX1BMQUlOID0gZXhwb3J0cy5GT1JNQVRfSFRNTCA9IGV4cG9ydHMuRk9STUFUUyA9IHZvaWQgMDtcbnZhciBGT1JNQVRfSFRNTCA9IFwiaHRtbFwiO1xuZXhwb3J0cy5GT1JNQVRfSFRNTCA9IEZPUk1BVF9IVE1MO1xudmFyIEZPUk1BVF9QTEFJTiA9IFwicGxhaW5cIjtcbmV4cG9ydHMuRk9STUFUX1BMQUlOID0gRk9STUFUX1BMQUlOO1xudmFyIEZPUk1BVFMgPSBbRk9STUFUX0hUTUwsIEZPUk1BVF9QTEFJTl07XG5leHBvcnRzLkZPUk1BVFMgPSBGT1JNQVRTO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpHVDFKTlFWUmZTRlJOVENJc0lrWlBVazFCVkY5UVRFRkpUaUlzSWtaUFVrMUJWRk1pWFN3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZZMjl1YzNSaGJuUnpMMlp2Y20xaGRITXVkSE1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdOdmJuTjBJRVpQVWsxQlZGOUlWRTFNSUQwZ1hDSm9kRzFzWENJN1hISmNibVY0Y0c5eWRDQmpiMjV6ZENCR1QxSk5RVlJmVUV4QlNVNGdQU0JjSW5Cc1lXbHVYQ0k3WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JHVDFKTlFWUlRJRDBnVzBaUFVrMUJWRjlJVkUxTUxDQkdUMUpOUVZSZlVFeEJTVTVkTzF4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JNYjNKbGJVWnZjbTFoZENBOUlGd2ljR3hoYVc1Y0lpQjhJRndpYUhSdGJGd2lPMXh5WEc0aVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096dEJRVUZQTEVsQlFVMUJMRmRCUVZjc1IwRkJSeXhOUVVGd1FqczdRVUZEUVN4SlFVRk5ReXhaUVVGWkxFZEJRVWNzVDBGQmNrSTdPMEZCUTBFc1NVRkJUVU1zVDBGQlR5eEhRVUZITEVOQlFVTkdMRmRCUVVRc1JVRkJZME1zV1VGQlpDeERRVUZvUWlKOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5MSU5FX0VORElOR1MgPSB2b2lkIDA7XG52YXIgTElORV9FTkRJTkdTID0ge1xuICBQT1NJWDogXCJcXG5cIixcbiAgV0lOMzI6IFwiXFxyXFxuXCJcbn07XG5leHBvcnRzLkxJTkVfRU5ESU5HUyA9IExJTkVfRU5ESU5HUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKTVNVNUZYMFZPUkVsT1IxTWlMQ0pRVDFOSldDSXNJbGRKVGpNeUlsMHNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDJOdmJuTjBZVzUwY3k5c2FXNWxSVzVrYVc1bmN5NTBjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblFnWTI5dWMzUWdURWxPUlY5RlRrUkpUa2RUSUQwZ2UxeHlYRzRnSUZCUFUwbFlPaUJjSWx4Y2Jsd2lMRnh5WEc0Z0lGZEpUak15T2lCY0lseGNjbHhjYmx3aUxGeHlYRzU5TzF4eVhHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenRCUVVGUExFbEJRVTFCTEZsQlFWa3NSMEZCUnp0RlFVTXhRa01zUzBGQlN5eEZRVUZGTEVsQlJHMUNPMFZCUlRGQ1F5eExRVUZMTEVWQlFVVTdRVUZHYlVJc1EwRkJja0lpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TVVBQT1JURURfUExBVEZPUk1TID0gdm9pZCAwO1xudmFyIFNVUFBPUlRFRF9QTEFURk9STVMgPSB7XG4gIERBUldJTjogXCJkYXJ3aW5cIixcbiAgTElOVVg6IFwibGludXhcIixcbiAgV0lOMzI6IFwid2luMzJcIlxufTtcbmV4cG9ydHMuU1VQUE9SVEVEX1BMQVRGT1JNUyA9IFNVUFBPUlRFRF9QTEFURk9STVM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SlRWVkJRVDFKVVJVUmZVRXhCVkVaUFVrMVRJaXdpUkVGU1YwbE9JaXdpVEVsT1ZWZ2lMQ0pYU1U0ek1pSmRMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5amIyNXpkR0Z1ZEhNdmNHeGhkR1p2Y20xekxuUnpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JqYjI1emRDQlRWVkJRVDFKVVJVUmZVRXhCVkVaUFVrMVRJRDBnZTF4eVhHNGdJRVJCVWxkSlRqb2dYQ0prWVhKM2FXNWNJaXhjY2x4dUlDQk1TVTVWV0RvZ1hDSnNhVzUxZUZ3aUxGeHlYRzRnSUZkSlRqTXlPaUJjSW5kcGJqTXlYQ0lzWEhKY2JuMDdYSEpjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRVThzU1VGQlRVRXNiVUpCUVcxQ0xFZEJRVWM3UlVGRGFrTkRMRTFCUVUwc1JVRkJSU3hSUVVSNVFqdEZRVVZxUTBNc1MwRkJTeXhGUVVGRkxFOUJSakJDTzBWQlIycERReXhMUVVGTExFVkJRVVU3UVVGSU1FSXNRMEZCTlVJaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVU5JVF9XT1JEUyA9IGV4cG9ydHMuVU5JVF9XT1JEID0gZXhwb3J0cy5VTklUX1NFTlRFTkNFUyA9IGV4cG9ydHMuVU5JVF9TRU5URU5DRSA9IGV4cG9ydHMuVU5JVF9QQVJBR1JBUEhTID0gZXhwb3J0cy5VTklUX1BBUkFHUkFQSCA9IGV4cG9ydHMuVU5JVFMgPSB2b2lkIDA7XG52YXIgVU5JVF9XT1JEUyA9IFwid29yZHNcIjtcbmV4cG9ydHMuVU5JVF9XT1JEUyA9IFVOSVRfV09SRFM7XG52YXIgVU5JVF9XT1JEID0gXCJ3b3JkXCI7XG5leHBvcnRzLlVOSVRfV09SRCA9IFVOSVRfV09SRDtcbnZhciBVTklUX1NFTlRFTkNFUyA9IFwic2VudGVuY2VzXCI7XG5leHBvcnRzLlVOSVRfU0VOVEVOQ0VTID0gVU5JVF9TRU5URU5DRVM7XG52YXIgVU5JVF9TRU5URU5DRSA9IFwic2VudGVuY2VcIjtcbmV4cG9ydHMuVU5JVF9TRU5URU5DRSA9IFVOSVRfU0VOVEVOQ0U7XG52YXIgVU5JVF9QQVJBR1JBUEhTID0gXCJwYXJhZ3JhcGhzXCI7XG5leHBvcnRzLlVOSVRfUEFSQUdSQVBIUyA9IFVOSVRfUEFSQUdSQVBIUztcbnZhciBVTklUX1BBUkFHUkFQSCA9IFwicGFyYWdyYXBoXCI7XG5leHBvcnRzLlVOSVRfUEFSQUdSQVBIID0gVU5JVF9QQVJBR1JBUEg7XG52YXIgVU5JVFMgPSBbVU5JVF9XT1JEUywgVU5JVF9XT1JELCBVTklUX1NFTlRFTkNFUywgVU5JVF9TRU5URU5DRSwgVU5JVF9QQVJBR1JBUEhTLCBVTklUX1BBUkFHUkFQSF07XG5leHBvcnRzLlVOSVRTID0gVU5JVFM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SlZUa2xVWDFkUFVrUlRJaXdpVlU1SlZGOVhUMUpFSWl3aVZVNUpWRjlUUlU1VVJVNURSVk1pTENKVlRrbFVYMU5GVGxSRlRrTkZJaXdpVlU1SlZGOVFRVkpCUjFKQlVFaFRJaXdpVlU1SlZGOVFRVkpCUjFKQlVFZ2lMQ0pWVGtsVVV5SmRMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5amIyNXpkR0Z1ZEhNdmRXNXBkSE11ZEhNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHTnZibk4wSUZWT1NWUmZWMDlTUkZNZ1BTQmNJbmR2Y21SelhDSTdYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZVNUpWRjlYVDFKRUlEMGdYQ0ozYjNKa1hDSTdYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZVNUpWRjlUUlU1VVJVNURSVk1nUFNCY0luTmxiblJsYm1ObGMxd2lPMXh1Wlhod2IzSjBJR052Ym5OMElGVk9TVlJmVTBWT1ZFVk9RMFVnUFNCY0luTmxiblJsYm1ObFhDSTdYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZVNUpWRjlRUVZKQlIxSkJVRWhUSUQwZ1hDSndZWEpoWjNKaGNHaHpYQ0k3WEc1bGVIQnZjblFnWTI5dWMzUWdWVTVKVkY5UVFWSkJSMUpCVUVnZ1BTQmNJbkJoY21GbmNtRndhRndpTzF4dVpYaHdiM0owSUdOdmJuTjBJRlZPU1ZSVElEMGdXMXh1SUNCVlRrbFVYMWRQVWtSVExGeHVJQ0JWVGtsVVgxZFBVa1FzWEc0Z0lGVk9TVlJmVTBWT1ZFVk9RMFZUTEZ4dUlDQlZUa2xVWDFORlRsUkZUa05GTEZ4dUlDQlZUa2xVWDFCQlVrRkhVa0ZRU0ZNc1hHNGdJRlZPU1ZSZlVFRlNRVWRTUVZCSUxGeHVYVHRjYm1WNGNHOXlkQ0IwZVhCbElFeHZjbVZ0Vlc1cGRDQTlJRndpZDI5eVpITmNJaUI4SUZ3aWQyOXlaRndpSUh3Z1hDSnpaVzUwWlc1alpYTmNJaUI4SUZ3aWMyVnVkR1Z1WTJWY0lpQjhJRndpY0dGeVlXZHlZWEJvYzF3aUlId2dYQ0p3WVhKaFozSmhjR2hjSWp0Y2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPMEZCUVU4c1NVRkJUVUVzVlVGQlZTeEhRVUZITEU5QlFXNUNPenRCUVVOQkxFbEJRVTFETEZOQlFWTXNSMEZCUnl4TlFVRnNRanM3UVVGRFFTeEpRVUZOUXl4alFVRmpMRWRCUVVjc1YwRkJka0k3TzBGQlEwRXNTVUZCVFVNc1lVRkJZU3hIUVVGSExGVkJRWFJDT3p0QlFVTkJMRWxCUVUxRExHVkJRV1VzUjBGQlJ5eFpRVUY0UWpzN1FVRkRRU3hKUVVGTlF5eGpRVUZqTEVkQlFVY3NWMEZCZGtJN08wRkJRMEVzU1VGQlRVTXNTMEZCU3l4SFFVRkhMRU5CUTI1Q1RpeFZRVVJ0UWl4RlFVVnVRa01zVTBGR2JVSXNSVUZIYmtKRExHTkJTRzFDTEVWQlNXNUNReXhoUVVwdFFpeEZRVXR1UWtNc1pVRk1iVUlzUlVGTmJrSkRMR05CVG0xQ0xFTkJRV1FpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5XT1JEUyA9IHZvaWQgMDtcbnZhciBXT1JEUyA9IFtcImFkXCIsIFwiYWRpcGlzaWNpbmdcIiwgXCJhbGlxdWFcIiwgXCJhbGlxdWlwXCIsIFwiYW1ldFwiLCBcImFuaW1cIiwgXCJhdXRlXCIsIFwiY2lsbHVtXCIsIFwiY29tbW9kb1wiLCBcImNvbnNlY3RldHVyXCIsIFwiY29uc2VxdWF0XCIsIFwiY3VscGFcIiwgXCJjdXBpZGF0YXRcIiwgXCJkZXNlcnVudFwiLCBcImRvXCIsIFwiZG9sb3JcIiwgXCJkb2xvcmVcIiwgXCJkdWlzXCIsIFwiZWFcIiwgXCJlaXVzbW9kXCIsIFwiZWxpdFwiLCBcImVuaW1cIiwgXCJlc3NlXCIsIFwiZXN0XCIsIFwiZXRcIiwgXCJldVwiLCBcImV4XCIsIFwiZXhjZXB0ZXVyXCIsIFwiZXhlcmNpdGF0aW9uXCIsIFwiZnVnaWF0XCIsIFwiaWRcIiwgXCJpblwiLCBcImluY2lkaWR1bnRcIiwgXCJpcHN1bVwiLCBcImlydXJlXCIsIFwibGFib3JlXCIsIFwibGFib3Jpc1wiLCBcImxhYm9ydW1cIiwgXCJMb3JlbVwiLCBcIm1hZ25hXCIsIFwibWluaW1cIiwgXCJtb2xsaXRcIiwgXCJuaXNpXCIsIFwibm9uXCIsIFwibm9zdHJ1ZFwiLCBcIm51bGxhXCIsIFwib2NjYWVjYXRcIiwgXCJvZmZpY2lhXCIsIFwicGFyaWF0dXJcIiwgXCJwcm9pZGVudFwiLCBcInF1aVwiLCBcInF1aXNcIiwgXCJyZXByZWhlbmRlcml0XCIsIFwic2ludFwiLCBcInNpdFwiLCBcInN1bnRcIiwgXCJ0ZW1wb3JcIiwgXCJ1bGxhbWNvXCIsIFwidXRcIiwgXCJ2ZWxpdFwiLCBcInZlbmlhbVwiLCBcInZvbHVwdGF0ZVwiXTtcbmV4cG9ydHMuV09SRFMgPSBXT1JEUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKWFQxSkVVeUpkTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OWpiMjV6ZEdGdWRITXZkMjl5WkhNdWRITWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR052Ym5OMElGZFBVa1JUSUQwZ1cxeHlYRzRnSUZ3aVlXUmNJaXhjY2x4dUlDQmNJbUZrYVhCcGMybGphVzVuWENJc1hISmNiaUFnWENKaGJHbHhkV0ZjSWl4Y2NseHVJQ0JjSW1Gc2FYRjFhWEJjSWl4Y2NseHVJQ0JjSW1GdFpYUmNJaXhjY2x4dUlDQmNJbUZ1YVcxY0lpeGNjbHh1SUNCY0ltRjFkR1ZjSWl4Y2NseHVJQ0JjSW1OcGJHeDFiVndpTEZ4eVhHNGdJRndpWTI5dGJXOWtiMXdpTEZ4eVhHNGdJRndpWTI5dWMyVmpkR1YwZFhKY0lpeGNjbHh1SUNCY0ltTnZibk5sY1hWaGRGd2lMRnh5WEc0Z0lGd2lZM1ZzY0dGY0lpeGNjbHh1SUNCY0ltTjFjR2xrWVhSaGRGd2lMRnh5WEc0Z0lGd2laR1Z6WlhKMWJuUmNJaXhjY2x4dUlDQmNJbVJ2WENJc1hISmNiaUFnWENKa2IyeHZjbHdpTEZ4eVhHNGdJRndpWkc5c2IzSmxYQ0lzWEhKY2JpQWdYQ0prZFdselhDSXNYSEpjYmlBZ1hDSmxZVndpTEZ4eVhHNGdJRndpWldsMWMyMXZaRndpTEZ4eVhHNGdJRndpWld4cGRGd2lMRnh5WEc0Z0lGd2laVzVwYlZ3aUxGeHlYRzRnSUZ3aVpYTnpaVndpTEZ4eVhHNGdJRndpWlhOMFhDSXNYSEpjYmlBZ1hDSmxkRndpTEZ4eVhHNGdJRndpWlhWY0lpeGNjbHh1SUNCY0ltVjRYQ0lzWEhKY2JpQWdYQ0psZUdObGNIUmxkWEpjSWl4Y2NseHVJQ0JjSW1WNFpYSmphWFJoZEdsdmJsd2lMRnh5WEc0Z0lGd2lablZuYVdGMFhDSXNYSEpjYmlBZ1hDSnBaRndpTEZ4eVhHNGdJRndpYVc1Y0lpeGNjbHh1SUNCY0ltbHVZMmxrYVdSMWJuUmNJaXhjY2x4dUlDQmNJbWx3YzNWdFhDSXNYSEpjYmlBZ1hDSnBjblZ5WlZ3aUxGeHlYRzRnSUZ3aWJHRmliM0psWENJc1hISmNiaUFnWENKc1lXSnZjbWx6WENJc1hISmNiaUFnWENKc1lXSnZjblZ0WENJc1hISmNiaUFnWENKTWIzSmxiVndpTEZ4eVhHNGdJRndpYldGbmJtRmNJaXhjY2x4dUlDQmNJbTFwYm1sdFhDSXNYSEpjYmlBZ1hDSnRiMnhzYVhSY0lpeGNjbHh1SUNCY0ltNXBjMmxjSWl4Y2NseHVJQ0JjSW01dmJsd2lMRnh5WEc0Z0lGd2libTl6ZEhKMVpGd2lMRnh5WEc0Z0lGd2liblZzYkdGY0lpeGNjbHh1SUNCY0ltOWpZMkZsWTJGMFhDSXNYSEpjYmlBZ1hDSnZabVpwWTJsaFhDSXNYSEpjYmlBZ1hDSndZWEpwWVhSMWNsd2lMRnh5WEc0Z0lGd2ljSEp2YVdSbGJuUmNJaXhjY2x4dUlDQmNJbkYxYVZ3aUxGeHlYRzRnSUZ3aWNYVnBjMXdpTEZ4eVhHNGdJRndpY21Wd2NtVm9aVzVrWlhKcGRGd2lMRnh5WEc0Z0lGd2ljMmx1ZEZ3aUxGeHlYRzRnSUZ3aWMybDBYQ0lzWEhKY2JpQWdYQ0p6ZFc1MFhDSXNYSEpjYmlBZ1hDSjBaVzF3YjNKY0lpeGNjbHh1SUNCY0luVnNiR0Z0WTI5Y0lpeGNjbHh1SUNCY0luVjBYQ0lzWEhKY2JpQWdYQ0oyWld4cGRGd2lMRnh5WEc0Z0lGd2lkbVZ1YVdGdFhDSXNYSEpjYmlBZ1hDSjJiMngxY0hSaGRHVmNJaXhjY2x4dVhUdGNjbHh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJUeXhKUVVGTlFTeExRVUZMTEVkQlFVY3NRMEZEYmtJc1NVRkViVUlzUlVGRmJrSXNZVUZHYlVJc1JVRkhia0lzVVVGSWJVSXNSVUZKYmtJc1UwRktiVUlzUlVGTGJrSXNUVUZNYlVJc1JVRk5ia0lzVFVGT2JVSXNSVUZQYmtJc1RVRlFiVUlzUlVGUmJrSXNVVUZTYlVJc1JVRlRia0lzVTBGVWJVSXNSVUZWYmtJc1lVRldiVUlzUlVGWGJrSXNWMEZZYlVJc1JVRlpia0lzVDBGYWJVSXNSVUZoYmtJc1YwRmliVUlzUlVGamJrSXNWVUZrYlVJc1JVRmxia0lzU1VGbWJVSXNSVUZuUW01Q0xFOUJhRUp0UWl4RlFXbENia0lzVVVGcVFtMUNMRVZCYTBKdVFpeE5RV3hDYlVJc1JVRnRRbTVDTEVsQmJrSnRRaXhGUVc5Q2JrSXNVMEZ3UW0xQ0xFVkJjVUp1UWl4TlFYSkNiVUlzUlVGelFtNUNMRTFCZEVKdFFpeEZRWFZDYmtJc1RVRjJRbTFDTEVWQmQwSnVRaXhMUVhoQ2JVSXNSVUY1UW01Q0xFbEJla0p0UWl4RlFUQkNia0lzU1VFeFFtMUNMRVZCTWtKdVFpeEpRVE5DYlVJc1JVRTBRbTVDTEZkQk5VSnRRaXhGUVRaQ2JrSXNZMEUzUW0xQ0xFVkJPRUp1UWl4UlFUbENiVUlzUlVFclFtNUNMRWxCTDBKdFFpeEZRV2REYmtJc1NVRm9RMjFDTEVWQmFVTnVRaXhaUVdwRGJVSXNSVUZyUTI1Q0xFOUJiRU50UWl4RlFXMURia0lzVDBGdVEyMUNMRVZCYjBOdVFpeFJRWEJEYlVJc1JVRnhRMjVDTEZOQmNrTnRRaXhGUVhORGJrSXNVMEYwUTIxQ0xFVkJkVU51UWl4UFFYWkRiVUlzUlVGM1EyNUNMRTlCZUVOdFFpeEZRWGxEYmtJc1QwRjZRMjFDTEVWQk1FTnVRaXhSUVRGRGJVSXNSVUV5UTI1Q0xFMUJNME50UWl4RlFUUkRia0lzUzBFMVEyMUNMRVZCTmtOdVFpeFRRVGREYlVJc1JVRTRRMjVDTEU5Qk9VTnRRaXhGUVN0RGJrSXNWVUV2UTIxQ0xFVkJaMFJ1UWl4VFFXaEViVUlzUlVGcFJHNUNMRlZCYWtSdFFpeEZRV3RFYmtJc1ZVRnNSRzFDTEVWQmJVUnVRaXhMUVc1RWJVSXNSVUZ2Ukc1Q0xFMUJjRVJ0UWl4RlFYRkVia0lzWlVGeVJHMUNMRVZCYzBSdVFpeE5RWFJFYlVJc1JVRjFSRzVDTEV0QmRrUnRRaXhGUVhkRWJrSXNUVUY0UkcxQ0xFVkJlVVJ1UWl4UlFYcEViVUlzUlVFd1JHNUNMRk5CTVVSdFFpeEZRVEpFYmtJc1NVRXpSRzFDTEVWQk5FUnVRaXhQUVRWRWJVSXNSVUUyUkc1Q0xGRkJOMFJ0UWl4RlFUaEVia0lzVjBFNVJHMUNMRU5CUVdRaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxvcmVtSXBzdW1cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xvcmVtSXBzdW1bXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbmV4cG9ydHMubG9yZW1JcHN1bSA9IHZvaWQgMDtcblxudmFyIF9mb3JtYXRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzL2Zvcm1hdHNcIik7XG5cbnZhciBfdW5pdHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHMvdW5pdHNcIik7XG5cbnZhciBfd29yZHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHMvd29yZHNcIik7XG5cbnZhciBfTG9yZW1JcHN1bSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL0xvcmVtSXBzdW1cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIGxvcmVtSXBzdW0gPSBmdW5jdGlvbiBsb3JlbUlwc3VtKCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJGNvdW50ID0gX3JlZi5jb3VudCxcbiAgICAgIGNvdW50ID0gX3JlZiRjb3VudCA9PT0gdm9pZCAwID8gMSA6IF9yZWYkY291bnQsXG4gICAgICBfcmVmJGZvcm1hdCA9IF9yZWYuZm9ybWF0LFxuICAgICAgZm9ybWF0ID0gX3JlZiRmb3JtYXQgPT09IHZvaWQgMCA/IF9mb3JtYXRzLkZPUk1BVF9QTEFJTiA6IF9yZWYkZm9ybWF0LFxuICAgICAgX3JlZiRwYXJhZ3JhcGhMb3dlckJvID0gX3JlZi5wYXJhZ3JhcGhMb3dlckJvdW5kLFxuICAgICAgcGFyYWdyYXBoTG93ZXJCb3VuZCA9IF9yZWYkcGFyYWdyYXBoTG93ZXJCbyA9PT0gdm9pZCAwID8gMyA6IF9yZWYkcGFyYWdyYXBoTG93ZXJCbyxcbiAgICAgIF9yZWYkcGFyYWdyYXBoVXBwZXJCbyA9IF9yZWYucGFyYWdyYXBoVXBwZXJCb3VuZCxcbiAgICAgIHBhcmFncmFwaFVwcGVyQm91bmQgPSBfcmVmJHBhcmFncmFwaFVwcGVyQm8gPT09IHZvaWQgMCA/IDcgOiBfcmVmJHBhcmFncmFwaFVwcGVyQm8sXG4gICAgICByYW5kb20gPSBfcmVmLnJhbmRvbSxcbiAgICAgIF9yZWYkc2VudGVuY2VMb3dlckJvdSA9IF9yZWYuc2VudGVuY2VMb3dlckJvdW5kLFxuICAgICAgc2VudGVuY2VMb3dlckJvdW5kID0gX3JlZiRzZW50ZW5jZUxvd2VyQm91ID09PSB2b2lkIDAgPyA1IDogX3JlZiRzZW50ZW5jZUxvd2VyQm91LFxuICAgICAgX3JlZiRzZW50ZW5jZVVwcGVyQm91ID0gX3JlZi5zZW50ZW5jZVVwcGVyQm91bmQsXG4gICAgICBzZW50ZW5jZVVwcGVyQm91bmQgPSBfcmVmJHNlbnRlbmNlVXBwZXJCb3UgPT09IHZvaWQgMCA/IDE1IDogX3JlZiRzZW50ZW5jZVVwcGVyQm91LFxuICAgICAgX3JlZiR1bml0cyA9IF9yZWYudW5pdHMsXG4gICAgICB1bml0cyA9IF9yZWYkdW5pdHMgPT09IHZvaWQgMCA/IF91bml0cy5VTklUX1NFTlRFTkNFUyA6IF9yZWYkdW5pdHMsXG4gICAgICBfcmVmJHdvcmRzID0gX3JlZi53b3JkcyxcbiAgICAgIHdvcmRzID0gX3JlZiR3b3JkcyA9PT0gdm9pZCAwID8gX3dvcmRzLldPUkRTIDogX3JlZiR3b3JkcyxcbiAgICAgIF9yZWYkc3VmZml4ID0gX3JlZi5zdWZmaXgsXG4gICAgICBzdWZmaXggPSBfcmVmJHN1ZmZpeCA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYkc3VmZml4O1xuXG4gIHZhciBvcHRpb25zID0ge1xuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNlbnRlbmNlc1BlclBhcmFncmFwaDoge1xuICAgICAgbWF4OiBwYXJhZ3JhcGhVcHBlckJvdW5kLFxuICAgICAgbWluOiBwYXJhZ3JhcGhMb3dlckJvdW5kXG4gICAgfSxcbiAgICB3b3Jkczogd29yZHMsXG4gICAgd29yZHNQZXJTZW50ZW5jZToge1xuICAgICAgbWF4OiBzZW50ZW5jZVVwcGVyQm91bmQsXG4gICAgICBtaW46IHNlbnRlbmNlTG93ZXJCb3VuZFxuICAgIH1cbiAgfTtcbiAgdmFyIGxvcmVtID0gbmV3IF9Mb3JlbUlwc3VtW1wiZGVmYXVsdFwiXShvcHRpb25zLCBmb3JtYXQsIHN1ZmZpeCk7XG5cbiAgc3dpdGNoICh1bml0cykge1xuICAgIGNhc2UgX3VuaXRzLlVOSVRfUEFSQUdSQVBIUzpcbiAgICBjYXNlIF91bml0cy5VTklUX1BBUkFHUkFQSDpcbiAgICAgIHJldHVybiBsb3JlbS5nZW5lcmF0ZVBhcmFncmFwaHMoY291bnQpO1xuXG4gICAgY2FzZSBfdW5pdHMuVU5JVF9TRU5URU5DRVM6XG4gICAgY2FzZSBfdW5pdHMuVU5JVF9TRU5URU5DRTpcbiAgICAgIHJldHVybiBsb3JlbS5nZW5lcmF0ZVNlbnRlbmNlcyhjb3VudCk7XG5cbiAgICBjYXNlIF91bml0cy5VTklUX1dPUkRTOlxuICAgIGNhc2UgX3VuaXRzLlVOSVRfV09SRDpcbiAgICAgIHJldHVybiBsb3JlbS5nZW5lcmF0ZVdvcmRzKGNvdW50KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufTtcblxuZXhwb3J0cy5sb3JlbUlwc3VtID0gbG9yZW1JcHN1bTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKc2IzSmxiVWx3YzNWdElpd2lZMjkxYm5RaUxDSm1iM0p0WVhRaUxDSkdUMUpOUVZSZlVFeEJTVTRpTENKd1lYSmhaM0poY0doTWIzZGxja0p2ZFc1a0lpd2ljR0Z5WVdkeVlYQm9WWEJ3WlhKQ2IzVnVaQ0lzSW5KaGJtUnZiU0lzSW5ObGJuUmxibU5sVEc5M1pYSkNiM1Z1WkNJc0luTmxiblJsYm1ObFZYQndaWEpDYjNWdVpDSXNJblZ1YVhSeklpd2lWVTVKVkY5VFJVNVVSVTVEUlZNaUxDSjNiM0prY3lJc0lsZFBVa1JUSWl3aWMzVm1abWw0SWl3aWIzQjBhVzl1Y3lJc0luTmxiblJsYm1ObGMxQmxjbEJoY21GbmNtRndhQ0lzSW0xaGVDSXNJbTFwYmlJc0luZHZjbVJ6VUdWeVUyVnVkR1Z1WTJVaUxDSnNiM0psYlNJc0lreHZjbVZ0U1hCemRXMGlMQ0pWVGtsVVgxQkJVa0ZIVWtGUVNGTWlMQ0pWVGtsVVgxQkJVa0ZIVWtGUVNDSXNJbWRsYm1WeVlYUmxVR0Z5WVdkeVlYQm9jeUlzSWxWT1NWUmZVMFZPVkVWT1EwVWlMQ0puWlc1bGNtRjBaVk5sYm5SbGJtTmxjeUlzSWxWT1NWUmZWMDlTUkZNaUxDSlZUa2xVWDFkUFVrUWlMQ0puWlc1bGNtRjBaVmR2Y21SeklsMHNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMmx1WkdWNExuUnpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUV4dmNtVnRSbTl5YldGMExDQkdUMUpOUVZSZlVFeEJTVTRnZlNCbWNtOXRJRndpTGk5amIyNXpkR0Z1ZEhNdlptOXliV0YwYzF3aU8xeHlYRzVwYlhCdmNuUWdlMXh5WEc0Z0lFeHZjbVZ0Vlc1cGRDeGNjbHh1SUNCVlRrbFVYMUJCVWtGSFVrRlFTQ3hjY2x4dUlDQlZUa2xVWDFCQlVrRkhVa0ZRU0ZNc1hISmNiaUFnVlU1SlZGOVRSVTVVUlU1RFJWTXNYSEpjYmlBZ1ZVNUpWRjlUUlU1VVJVNURSU3hjY2x4dUlDQlZUa2xVWDFkUFVrUlRMRnh5WEc0Z0lGVk9TVlJmVjA5U1JDeGNjbHh1ZlNCbWNtOXRJRndpTGk5amIyNXpkR0Z1ZEhNdmRXNXBkSE5jSWp0Y2NseHVhVzF3YjNKMElIc2dWMDlTUkZNZ2ZTQm1jbTl0SUZ3aUxpOWpiMjV6ZEdGdWRITXZkMjl5WkhOY0lqdGNjbHh1YVcxd2IzSjBJSHNnU1ZCeWJtY2dmU0JtY205dElGd2lMaTlzYVdJdloyVnVaWEpoZEc5eVhDSTdYSEpjYm1sdGNHOXlkQ0JNYjNKbGJVbHdjM1Z0SUdaeWIyMGdYQ0l1TDJ4cFlpOU1iM0psYlVsd2MzVnRYQ0k3WEhKY2JseHlYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRWxNYjNKbGJVbHdjM1Z0VUdGeVlXMXpJSHRjY2x4dUlDQmpiM1Z1ZEQ4NklHNTFiV0psY2p0Y2NseHVJQ0JtYjNKdFlYUS9PaUJNYjNKbGJVWnZjbTFoZER0Y2NseHVJQ0J3WVhKaFozSmhjR2hNYjNkbGNrSnZkVzVrUHpvZ2JuVnRZbVZ5TzF4eVhHNGdJSEJoY21GbmNtRndhRlZ3Y0dWeVFtOTFibVEvT2lCdWRXMWlaWEk3WEhKY2JpQWdjbUZ1Wkc5dFB6b2dTVkJ5Ym1jN1hISmNiaUFnYzJWdWRHVnVZMlZNYjNkbGNrSnZkVzVrUHpvZ2JuVnRZbVZ5TzF4eVhHNGdJSE5sYm5SbGJtTmxWWEJ3WlhKQ2IzVnVaRDg2SUc1MWJXSmxjanRjY2x4dUlDQjFibWwwY3o4NklFeHZjbVZ0Vlc1cGREdGNjbHh1SUNCM2IzSmtjejg2SUhOMGNtbHVaMXRkTzF4eVhHNGdJSE4xWm1acGVEODZJSE4wY21sdVp6dGNjbHh1ZlZ4eVhHNWNjbHh1WTI5dWMzUWdiRzl5WlcxSmNITjFiU0E5SUNoN1hISmNiaUFnWTI5MWJuUWdQU0F4TEZ4eVhHNGdJR1p2Y20xaGRDQTlJRVpQVWsxQlZGOVFURUZKVGl4Y2NseHVJQ0J3WVhKaFozSmhjR2hNYjNkbGNrSnZkVzVrSUQwZ015eGNjbHh1SUNCd1lYSmhaM0poY0doVmNIQmxja0p2ZFc1a0lEMGdOeXhjY2x4dUlDQnlZVzVrYjIwc1hISmNiaUFnYzJWdWRHVnVZMlZNYjNkbGNrSnZkVzVrSUQwZ05TeGNjbHh1SUNCelpXNTBaVzVqWlZWd2NHVnlRbTkxYm1RZ1BTQXhOU3hjY2x4dUlDQjFibWwwY3lBOUlGVk9TVlJmVTBWT1ZFVk9RMFZUTEZ4eVhHNGdJSGR2Y21SeklEMGdWMDlTUkZNc1hISmNiaUFnYzNWbVptbDRJRDBnWENKY0lpeGNjbHh1ZlRvZ1NVeHZjbVZ0U1hCemRXMVFZWEpoYlhNZ1BTQjdmU2s2SUhOMGNtbHVaeUE5UGlCN1hISmNiaUFnWTI5dWMzUWdiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJSEpoYm1SdmJTeGNjbHh1SUNBZ0lITmxiblJsYm1ObGMxQmxjbEJoY21GbmNtRndhRG9nZTF4eVhHNGdJQ0FnSUNCdFlYZzZJSEJoY21GbmNtRndhRlZ3Y0dWeVFtOTFibVFzWEhKY2JpQWdJQ0FnSUcxcGJqb2djR0Z5WVdkeVlYQm9URzkzWlhKQ2IzVnVaQ3hjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0IzYjNKa2N5eGNjbHh1SUNBZ0lIZHZjbVJ6VUdWeVUyVnVkR1Z1WTJVNklIdGNjbHh1SUNBZ0lDQWdiV0Y0T2lCelpXNTBaVzVqWlZWd2NHVnlRbTkxYm1Rc1hISmNiaUFnSUNBZ0lHMXBiam9nYzJWdWRHVnVZMlZNYjNkbGNrSnZkVzVrTEZ4eVhHNGdJQ0FnZlN4Y2NseHVJQ0I5TzF4eVhHNWNjbHh1SUNCamIyNXpkQ0JzYjNKbGJUb2dURzl5WlcxSmNITjFiU0E5SUc1bGR5Qk1iM0psYlVsd2MzVnRLRzl3ZEdsdmJuTXNJR1p2Y20xaGRDd2djM1ZtWm1sNEtUdGNjbHh1WEhKY2JpQWdjM2RwZEdOb0lDaDFibWwwY3lrZ2UxeHlYRzRnSUNBZ1kyRnpaU0JWVGtsVVgxQkJVa0ZIVWtGUVNGTTZYSEpjYmlBZ0lDQmpZWE5sSUZWT1NWUmZVRUZTUVVkU1FWQklPbHh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiRzl5WlcwdVoyVnVaWEpoZEdWUVlYSmhaM0poY0doektHTnZkVzUwS1R0Y2NseHVJQ0FnSUdOaGMyVWdWVTVKVkY5VFJVNVVSVTVEUlZNNlhISmNiaUFnSUNCallYTmxJRlZPU1ZSZlUwVk9WRVZPUTBVNlhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCc2IzSmxiUzVuWlc1bGNtRjBaVk5sYm5SbGJtTmxjeWhqYjNWdWRDazdYSEpjYmlBZ0lDQmpZWE5sSUZWT1NWUmZWMDlTUkZNNlhISmNiaUFnSUNCallYTmxJRlZPU1ZSZlYwOVNSRHBjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR3h2Y21WdExtZGxibVZ5WVhSbFYyOXlaSE1vWTI5MWJuUXBPMXh5WEc0Z0lDQWdaR1ZtWVhWc2REcGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlGd2lYQ0k3WEhKY2JpQWdmVnh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUhzZ2JHOXlaVzFKY0hOMWJTd2dURzl5WlcxSmNITjFiU0I5TzF4eVhHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdRVUZCUVRzN1FVRkRRVHM3UVVGVFFUczdRVUZGUVRzN096dEJRV1ZCTEVsQlFVMUJMRlZCUVZVc1IwRkJSeXhUUVVGaVFTeFZRVUZoTEVkQlYyMUNPMFZCUVVFc0swVkJRV1lzUlVGQlpUdEZRVUZCTEhOQ1FWWndRME1zUzBGVmIwTTdSVUZCUVN4SlFWWndRMEVzUzBGVmIwTXNNa0pCVmpWQ0xFTkJWVFJDTzBWQlFVRXNkVUpCVkhCRFF5eE5RVk52UXp0RlFVRkJMRWxCVkhCRFFTeE5RVk52UXl3MFFrRlVNMEpETEhGQ1FWTXlRanRGUVVGQkxHbERRVkp3UTBNc2JVSkJVVzlETzBWQlFVRXNTVUZTY0VOQkxHMUNRVkZ2UXl4elEwRlNaQ3hEUVZGak8wVkJRVUVzYVVOQlVIQkRReXh0UWtGUGIwTTdSVUZCUVN4SlFWQndRMEVzYlVKQlQyOURMSE5EUVZCa0xFTkJUMk03UlVGQlFTeEpRVTV3UTBNc1RVRk5iME1zVVVGT2NFTkJMRTFCVFc5RE8wVkJRVUVzYVVOQlRIQkRReXhyUWtGTGIwTTdSVUZCUVN4SlFVeHdRMEVzYTBKQlMyOURMSE5EUVV4bUxFTkJTMlU3UlVGQlFTeHBRMEZLY0VORExHdENRVWx2UXp0RlFVRkJMRWxCU25CRFFTeHJRa0ZKYjBNc2MwTkJTbVlzUlVGSlpUdEZRVUZCTEhOQ1FVaHdRME1zUzBGSGIwTTdSVUZCUVN4SlFVaHdRMEVzUzBGSGIwTXNNa0pCU0RWQ1F5eHhRa0ZITkVJN1JVRkJRU3h6UWtGR2NFTkRMRXRCUlc5RE8wVkJRVUVzU1VGR2NFTkJMRXRCUlc5RExESkNRVVkxUWtNc1dVRkZORUk3UlVGQlFTeDFRa0ZFY0VORExFMUJRMjlETzBWQlFVRXNTVUZFY0VOQkxFMUJRMjlETERSQ1FVUXpRaXhGUVVNeVFqczdSVUZEY0VNc1NVRkJUVU1zVDBGQlR5eEhRVUZITzBsQlEyUlNMRTFCUVUwc1JVRkJUa0VzVFVGRVl6dEpRVVZrVXl4eFFrRkJjVUlzUlVGQlJUdE5RVU55UWtNc1IwRkJSeXhGUVVGRldDeHRRa0ZFWjBJN1RVRkZja0paTEVkQlFVY3NSVUZCUldJN1NVRkdaMElzUTBGR1ZEdEpRVTFrVHl4TFFVRkxMRVZCUVV4QkxFdEJUbU03U1VGUFpFOHNaMEpCUVdkQ0xFVkJRVVU3VFVGRGFFSkdMRWRCUVVjc1JVRkJSVklzYTBKQlJGYzdUVUZGYUVKVExFZEJRVWNzUlVGQlJWWTdTVUZHVnp0RlFWQktMRU5CUVdoQ08wVkJZVUVzU1VGQlRWa3NTMEZCYVVJc1IwRkJSeXhKUVVGSlF5eHpRa0ZCU2l4RFFVRmxUaXhQUVVGbUxFVkJRWGRDV2l4TlFVRjRRaXhGUVVGblExY3NUVUZCYUVNc1EwRkJNVUk3TzBWQlJVRXNVVUZCVVVvc1MwRkJVanRKUVVORkxFdEJRVXRaTEhOQ1FVRk1PMGxCUTBFc1MwRkJTME1zY1VKQlFVdzdUVUZEUlN4UFFVRlBTQ3hMUVVGTExFTkJRVU5KTEd0Q1FVRk9MRU5CUVhsQ2RFSXNTMEZCZWtJc1EwRkJVRHM3U1VGRFJpeExRVUZMVXl4eFFrRkJURHRKUVVOQkxFdEJRVXRqTEc5Q1FVRk1PMDFCUTBVc1QwRkJUMHdzUzBGQlN5eERRVUZEVFN4cFFrRkJUaXhEUVVGM1FuaENMRXRCUVhoQ0xFTkJRVkE3TzBsQlEwWXNTMEZCUzNsQ0xHbENRVUZNTzBsQlEwRXNTMEZCUzBNc1owSkJRVXc3VFVGRFJTeFBRVUZQVWl4TFFVRkxMRU5CUVVOVExHRkJRVTRzUTBGQmIwSXpRaXhMUVVGd1FpeERRVUZRT3p0SlFVTkdPMDFCUTBVc1QwRkJUeXhGUVVGUU8wVkJXRW83UVVGaFJDeERRWGhEUkNKOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZm9ybWF0cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvZm9ybWF0c1wiKTtcblxudmFyIF9saW5lRW5kaW5ncyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvbGluZUVuZGluZ3NcIik7XG5cbnZhciBfZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbGliL2dlbmVyYXRvclwiKSk7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgTG9yZW1JcHN1bSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExvcmVtSXBzdW0oKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBmb3JtYXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IF9mb3JtYXRzLkZPUk1BVF9QTEFJTjtcbiAgICB2YXIgc3VmZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9yZW1JcHN1bSk7XG5cbiAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLnN1ZmZpeCA9IHN1ZmZpeDtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdlbmVyYXRvclwiLCB2b2lkIDApO1xuXG4gICAgaWYgKF9mb3JtYXRzLkZPUk1BVFMuaW5kZXhPZihmb3JtYXQudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoZm9ybWF0LCBcIiBpcyBhbiBpbnZhbGlkIGZvcm1hdC4gUGxlYXNlIHVzZSBcIikuY29uY2F0KF9mb3JtYXRzLkZPUk1BVFMuam9pbihcIiBvciBcIiksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgdGhpcy5nZW5lcmF0b3IgPSBuZXcgX2dlbmVyYXRvcltcImRlZmF1bHRcIl0ob3B0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9yZW1JcHN1bSwgW3tcbiAgICBrZXk6IFwiZ2V0TGluZUVuZGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMaW5lRW5kaW5nKCkge1xuICAgICAgaWYgKHRoaXMuc3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1ZmZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoMCwgX3V0aWwuaXNSZWFjdE5hdGl2ZSkoKSAmJiAoMCwgX3V0aWwuaXNOb2RlKSgpICYmICgwLCBfdXRpbC5pc1dpbmRvd3MpKCkpIHtcbiAgICAgICAgcmV0dXJuIF9saW5lRW5kaW5ncy5MSU5FX0VORElOR1MuV0lOMzI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfbGluZUVuZGluZ3MuTElORV9FTkRJTkdTLlBPU0lYO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0U3RyaW5nKHN0cikge1xuICAgICAgaWYgKHRoaXMuZm9ybWF0ID09PSBfZm9ybWF0cy5GT1JNQVRfSFRNTCkge1xuICAgICAgICByZXR1cm4gXCI8cD5cIi5jb25jYXQoc3RyLCBcIjwvcD5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdFN0cmluZ3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0U3RyaW5ncyhzdHJpbmdzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gc3RyaW5ncy5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0U3RyaW5nKHN0cik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2VuZXJhdGVXb3Jkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVdvcmRzKG51bSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0U3RyaW5nKHRoaXMuZ2VuZXJhdG9yLmdlbmVyYXRlUmFuZG9tV29yZHMobnVtKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdlbmVyYXRlU2VudGVuY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlU2VudGVuY2VzKG51bSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0U3RyaW5nKHRoaXMuZ2VuZXJhdG9yLmdlbmVyYXRlUmFuZG9tUGFyYWdyYXBoKG51bSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZW5lcmF0ZVBhcmFncmFwaHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVQYXJhZ3JhcGhzKG51bSkge1xuICAgICAgdmFyIG1ha2VTdHJpbmcgPSB0aGlzLmdlbmVyYXRvci5nZW5lcmF0ZVJhbmRvbVBhcmFncmFwaC5iaW5kKHRoaXMuZ2VuZXJhdG9yKTtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdFN0cmluZ3MoKDAsIF91dGlsLm1ha2VBcnJheU9mU3RyaW5ncykobnVtLCBtYWtlU3RyaW5nKSkuam9pbih0aGlzLmdldExpbmVFbmRpbmcoKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvcmVtSXBzdW07XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IExvcmVtSXBzdW07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpNYjNKbGJVbHdjM1Z0SWl3aWIzQjBhVzl1Y3lJc0ltWnZjbTFoZENJc0lrWlBVazFCVkY5UVRFRkpUaUlzSW5OMVptWnBlQ0lzSWtaUFVrMUJWRk1pTENKcGJtUmxlRTltSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0pGY25KdmNpSXNJbXB2YVc0aUxDSm5aVzVsY21GMGIzSWlMQ0pIWlc1bGNtRjBiM0lpTENKcGMxSmxZV04wVG1GMGFYWmxJaXdpYVhOT2IyUmxJaXdpYVhOWGFXNWtiM2R6SWl3aVRFbE9SVjlGVGtSSlRrZFRJaXdpVjBsT016SWlMQ0pRVDFOSldDSXNJbk4wY2lJc0lrWlBVazFCVkY5SVZFMU1JaXdpYzNSeWFXNW5jeUlzSW0xaGNDSXNJbVp2Y20xaGRGTjBjbWx1WnlJc0ltNTFiU0lzSW1kbGJtVnlZWFJsVW1GdVpHOXRWMjl5WkhNaUxDSm5aVzVsY21GMFpWSmhibVJ2YlZCaGNtRm5jbUZ3YUNJc0ltMWhhMlZUZEhKcGJtY2lMQ0ppYVc1a0lpd2labTl5YldGMFUzUnlhVzVuY3lJc0ltMWhhMlZCY25KaGVVOW1VM1J5YVc1bmN5SXNJbWRsZEV4cGJtVkZibVJwYm1jaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YkdsaUwweHZjbVZ0U1hCemRXMHVkSE1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1JrOVNUVUZVWDBoVVRVd3NJRVpQVWsxQlZGOVFURUZKVGl3Z1JrOVNUVUZVVXl3Z1RHOXlaVzFHYjNKdFlYUWdmU0JtY205dElGd2lMaTR2WTI5dWMzUmhiblJ6TDJadmNtMWhkSE5jSWp0Y2NseHVhVzF3YjNKMElIc2dURWxPUlY5RlRrUkpUa2RUSUgwZ1puSnZiU0JjSWk0dUwyTnZibk4wWVc1MGN5OXNhVzVsUlc1a2FXNW5jMXdpTzF4eVhHNXBiWEJ2Y25RZ1IyVnVaWEpoZEc5eUxDQjdJRWxIWlc1bGNtRjBiM0pQY0hScGIyNXpJSDBnWm5KdmJTQmNJaTR1TDJ4cFlpOW5aVzVsY21GMGIzSmNJanRjY2x4dWFXMXdiM0owSUhzZ2FYTk9iMlJsTENCcGMxSmxZV04wVG1GMGFYWmxMQ0JwYzFkcGJtUnZkM01zSUcxaGEyVkJjbkpoZVU5bVUzUnlhVzVuY3lCOUlHWnliMjBnWENJdUxpOTFkR2xzWENJN1hISmNibHh5WEc1amJHRnpjeUJNYjNKbGJVbHdjM1Z0SUh0Y2NseHVJQ0J3ZFdKc2FXTWdaMlZ1WlhKaGRHOXlPaUJIWlc1bGNtRjBiM0k3WEhKY2JseHlYRzRnSUdOdmJuTjBjblZqZEc5eUtGeHlYRzRnSUNBZ2IzQjBhVzl1Y3pvZ1NVZGxibVZ5WVhSdmNrOXdkR2x2Ym5NZ1BTQjdmU3hjY2x4dUlDQWdJSEIxWW14cFl5Qm1iM0p0WVhRNklFeHZjbVZ0Um05eWJXRjBJRDBnUms5U1RVRlVYMUJNUVVsT0xGeHlYRzRnSUNBZ2NIVmliR2xqSUhOMVptWnBlRDg2SUhOMGNtbHVaeXhjY2x4dUlDQXBJSHRjY2x4dUlDQWdJR2xtSUNoR1QxSk5RVlJUTG1sdVpHVjRUMllvWm05eWJXRjBMblJ2VEc5M1pYSkRZWE5sS0NrcElEMDlQU0F0TVNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZQ1I3Wm05eWJXRjBmU0JwY3lCaGJpQnBiblpoYkdsa0lHWnZjbTFoZEM0Z1VHeGxZWE5sSUhWelpTQWtlMFpQVWsxQlZGTXVhbTlwYmloY0lpQnZjaUJjSWlsOUxtQXNYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IwYUdsekxtZGxibVZ5WVhSdmNpQTlJRzVsZHlCSFpXNWxjbUYwYjNJb2IzQjBhVzl1Y3lrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCd2RXSnNhV01nWjJWMFRHbHVaVVZ1WkdsdVp5Z3BJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbk4xWm1acGVDa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emRXWm1hWGc3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FXWWdLQ0ZwYzFKbFlXTjBUbUYwYVhabEtDa2dKaVlnYVhOT2IyUmxLQ2tnSmlZZ2FYTlhhVzVrYjNkektDa3BJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRXhKVGtWZlJVNUVTVTVIVXk1WFNVNHpNanRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnVEVsT1JWOUZUa1JKVGtkVExsQlBVMGxZTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0hWaWJHbGpJR1p2Y20xaGRGTjBjbWx1WnloemRISTZJSE4wY21sdVp5azZJSE4wY21sdVp5QjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NW1iM0p0WVhRZ1BUMDlJRVpQVWsxQlZGOUlWRTFNS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCZ1BIQStKSHR6ZEhKOVBDOXdQbUE3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdjM1J5TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0hWaWJHbGpJR1p2Y20xaGRGTjBjbWx1WjNNb2MzUnlhVzVuY3pvZ2MzUnlhVzVuVzEwcE9pQnpkSEpwYm1kYlhTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2MzUnlhVzVuY3k1dFlYQW9LSE4wY2lrZ1BUNGdkR2hwY3k1bWIzSnRZWFJUZEhKcGJtY29jM1J5S1NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCd2RXSnNhV01nWjJWdVpYSmhkR1ZYYjNKa2N5aHVkVzAvT2lCdWRXMWlaWElwT2lCemRISnBibWNnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVptOXliV0YwVTNSeWFXNW5LSFJvYVhNdVoyVnVaWEpoZEc5eUxtZGxibVZ5WVhSbFVtRnVaRzl0VjI5eVpITW9iblZ0S1NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCd2RXSnNhV01nWjJWdVpYSmhkR1ZUWlc1MFpXNWpaWE1vYm5WdFB6b2diblZ0WW1WeUtUb2djM1J5YVc1bklIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVp2Y20xaGRGTjBjbWx1WnloMGFHbHpMbWRsYm1WeVlYUnZjaTVuWlc1bGNtRjBaVkpoYm1SdmJWQmhjbUZuY21Gd2FDaHVkVzBwS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhCMVlteHBZeUJuWlc1bGNtRjBaVkJoY21GbmNtRndhSE1vYm5WdE9pQnVkVzFpWlhJcE9pQnpkSEpwYm1jZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYldGclpWTjBjbWx1WnlBOUlIUm9hWE11WjJWdVpYSmhkRzl5TG1kbGJtVnlZWFJsVW1GdVpHOXRVR0Z5WVdkeVlYQm9MbUpwYm1Rb1hISmNiaUFnSUNBZ0lIUm9hWE11WjJWdVpYSmhkRzl5TEZ4eVhHNGdJQ0FnS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnZjbTFoZEZOMGNtbHVaM01vYldGclpVRnljbUY1VDJaVGRISnBibWR6S0c1MWJTd2diV0ZyWlZOMGNtbHVaeWtwTG1wdmFXNG9YSEpjYmlBZ0lDQWdJSFJvYVhNdVoyVjBUR2x1WlVWdVpHbHVaeWdwTEZ4eVhHNGdJQ0FnS1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUV4dmNtVnRTWEJ6ZFcwN1hISmNiaUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0QlFVRkJPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenM3T3pzN096czdPenM3U1VGRlRVRXNWVHRGUVVkS0xITkNRVWxGTzBsQlFVRXNTVUZJUVVNc1QwRkhRU3gxUlVGSU5rSXNSVUZITjBJN1NVRkJRU3hKUVVaUFF5eE5RVVZRTEhWRlFVWTJRa01zY1VKQlJUZENPMGxCUVVFc1NVRkVUME1zVFVGRFVEczdTVUZCUVRzN1NVRkJRU3hMUVVaUFJpeE5RVVZRTEVkQlJrOUJMRTFCUlZBN1NVRkJRU3hMUVVSUFJTeE5RVU5RTEVkQlJFOUJMRTFCUTFBN08wbEJRVUU3TzBsQlEwRXNTVUZCU1VNc1owSkJRVUVzUTBGQlVVTXNUMEZCVWl4RFFVRm5Ra29zVFVGQlRTeERRVUZEU3l4WFFVRlFMRVZCUVdoQ0xFMUJRVEJETEVOQlFVTXNRMEZCTDBNc1JVRkJhMFE3VFVGRGFFUXNUVUZCVFN4SlFVRkpReXhMUVVGS0xGZEJRMFJPTEUxQlJFTXNLME5CUXpCRFJ5eG5Ra0ZCUVN4RFFVRlJTU3hKUVVGU0xFTkJRV0VzVFVGQllpeERRVVF4UXl4UFFVRk9PMGxCUjBRN08wbEJRMFFzUzBGQlMwTXNVMEZCVEN4SFFVRnBRaXhKUVVGSlF5eHhRa0ZCU2l4RFFVRmpWaXhQUVVGa0xFTkJRV3BDTzBWQlEwUTdPenM3VjBGRlJDeDVRa0ZCZFVJN1RVRkRja0lzU1VGQlNTeExRVUZMUnl4TlFVRlVMRVZCUVdsQ08xRkJRMllzVDBGQlR5eExRVUZMUVN4TlFVRmFPMDFCUTBRN08wMUJSVVFzU1VGQlNTeERRVUZETEVsQlFVRlJMRzFDUVVGQkxFZEJRVVFzU1VGQmIwSXNTVUZCUVVNc1dVRkJRU3hIUVVGd1FpeEpRVUZuUXl4SlFVRkJReXhsUVVGQkxFZEJRWEJETEVWQlFXbEVPMUZCUXk5RExFOUJRVTlETEhsQ1FVRkJMRU5CUVdGRExFdEJRWEJDTzAxQlEwUTdPMDFCUlVRc1QwRkJUMFFzZVVKQlFVRXNRMEZCWVVVc1MwRkJjRUk3U1VGRFJEczdPMWRCUlVRc2MwSkJRVzlDUXl4SFFVRndRaXhGUVVGNVF6dE5RVU4yUXl4SlFVRkpMRXRCUVV0b1FpeE5RVUZNTEV0QlFXZENhVUlzYjBKQlFYQkNMRVZCUVdsRE8xRkJReTlDTEc5Q1FVRmhSQ3hIUVVGaU8wMUJRMFE3TzAxQlEwUXNUMEZCVDBFc1IwRkJVRHRKUVVORU96czdWMEZGUkN4MVFrRkJjVUpGTEU5QlFYSkNMRVZCUVd0RU8wMUJRVUU3TzAxQlEyaEVMRTlCUVU5QkxFOUJRVThzUTBGQlEwTXNSMEZCVWl4RFFVRlpMRlZCUVVOSUxFZEJRVVE3VVVGQlFTeFBRVUZUTEV0QlFVa3NRMEZCUTBrc1dVRkJUQ3hEUVVGclFrb3NSMEZCYkVJc1EwRkJWRHROUVVGQkxFTkJRVm9zUTBGQlVEdEpRVU5FT3pzN1YwRkZSQ3gxUWtGQmNVSkxMRWRCUVhKQ0xFVkJRVEpETzAxQlEzcERMRTlCUVU4c1MwRkJTMFFzV1VGQlRDeERRVUZyUWl4TFFVRkxXaXhUUVVGTUxFTkJRV1ZqTEcxQ1FVRm1MRU5CUVcxRFJDeEhRVUZ1UXl4RFFVRnNRaXhEUVVGUU8wbEJRMFE3T3p0WFFVVkVMREpDUVVGNVFrRXNSMEZCZWtJc1JVRkJLME03VFVGRE4wTXNUMEZCVHl4TFFVRkxSQ3haUVVGTUxFTkJRV3RDTEV0QlFVdGFMRk5CUVV3c1EwRkJaV1VzZFVKQlFXWXNRMEZCZFVOR0xFZEJRWFpETEVOQlFXeENMRU5CUVZBN1NVRkRSRHM3TzFkQlJVUXNORUpCUVRCQ1FTeEhRVUV4UWl4RlFVRXJRenROUVVNM1F5eEpRVUZOUnl4VlFVRlZMRWRCUVVjc1MwRkJTMmhDTEZOQlFVd3NRMEZCWldVc2RVSkJRV1lzUTBGQmRVTkZMRWxCUVhaRExFTkJRMnBDTEV0QlFVdHFRaXhUUVVSWkxFTkJRVzVDTzAxQlIwRXNUMEZCVHl4TFFVRkxhMElzWVVGQlRDeERRVUZ0UWl4SlFVRkJReXgzUWtGQlFTeEZRVUZ0UWs0c1IwRkJia0lzUlVGQmQwSkhMRlZCUVhoQ0xFTkJRVzVDTEVWQlFYZEVha0lzU1VGQmVFUXNRMEZEVEN4TFFVRkxjVUlzWVVGQlRDeEZRVVJMTEVOQlFWQTdTVUZIUkRzN096czdPMlZCUjFrNVFpeFZJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF93b3JkcyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvd29yZHNcIik7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBHZW5lcmF0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7XG4gICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICBfcmVmJHNlbnRlbmNlc1BlclBhcmEgPSBfcmVmLnNlbnRlbmNlc1BlclBhcmFncmFwaCxcbiAgICAgICAgc2VudGVuY2VzUGVyUGFyYWdyYXBoID0gX3JlZiRzZW50ZW5jZXNQZXJQYXJhID09PSB2b2lkIDAgPyB7XG4gICAgICBtYXg6IDcsXG4gICAgICBtaW46IDNcbiAgICB9IDogX3JlZiRzZW50ZW5jZXNQZXJQYXJhLFxuICAgICAgICBfcmVmJHdvcmRzUGVyU2VudGVuY2UgPSBfcmVmLndvcmRzUGVyU2VudGVuY2UsXG4gICAgICAgIHdvcmRzUGVyU2VudGVuY2UgPSBfcmVmJHdvcmRzUGVyU2VudGVuY2UgPT09IHZvaWQgMCA/IHtcbiAgICAgIG1heDogMTUsXG4gICAgICBtaW46IDVcbiAgICB9IDogX3JlZiR3b3Jkc1BlclNlbnRlbmNlLFxuICAgICAgICByYW5kb20gPSBfcmVmLnJhbmRvbSxcbiAgICAgICAgc2VlZCA9IF9yZWYuc2VlZCxcbiAgICAgICAgX3JlZiR3b3JkcyA9IF9yZWYud29yZHMsXG4gICAgICAgIHdvcmRzID0gX3JlZiR3b3JkcyA9PT0gdm9pZCAwID8gX3dvcmRzLldPUkRTIDogX3JlZiR3b3JkcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHZW5lcmF0b3IpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2VudGVuY2VzUGVyUGFyYWdyYXBoXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3b3Jkc1BlclNlbnRlbmNlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyYW5kb21cIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndvcmRzXCIsIHZvaWQgMCk7XG5cbiAgICBpZiAoc2VudGVuY2VzUGVyUGFyYWdyYXBoLm1pbiA+IHNlbnRlbmNlc1BlclBhcmFncmFwaC5tYXgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pbmltdW0gbnVtYmVyIG9mIHNlbnRlbmNlcyBwZXIgcGFyYWdyYXBoIChcIi5jb25jYXQoc2VudGVuY2VzUGVyUGFyYWdyYXBoLm1pbiwgXCIpIGNhbm5vdCBleGNlZWQgbWF4aW11bSAoXCIpLmNvbmNhdChzZW50ZW5jZXNQZXJQYXJhZ3JhcGgubWF4LCBcIikuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAod29yZHNQZXJTZW50ZW5jZS5taW4gPiB3b3Jkc1BlclNlbnRlbmNlLm1heCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWluaW11bSBudW1iZXIgb2Ygd29yZHMgcGVyIHNlbnRlbmNlIChcIi5jb25jYXQod29yZHNQZXJTZW50ZW5jZS5taW4sIFwiKSBjYW5ub3QgZXhjZWVkIG1heGltdW0gKFwiKS5jb25jYXQod29yZHNQZXJTZW50ZW5jZS5tYXgsIFwiKS5cIikpO1xuICAgIH1cblxuICAgIHRoaXMuc2VudGVuY2VzUGVyUGFyYWdyYXBoID0gc2VudGVuY2VzUGVyUGFyYWdyYXBoO1xuICAgIHRoaXMud29yZHMgPSB3b3JkcztcbiAgICB0aGlzLndvcmRzUGVyU2VudGVuY2UgPSB3b3Jkc1BlclNlbnRlbmNlO1xuICAgIHRoaXMucmFuZG9tID0gcmFuZG9tIHx8IE1hdGgucmFuZG9tO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEdlbmVyYXRvciwgW3tcbiAgICBrZXk6IFwiZ2VuZXJhdGVSYW5kb21JbnRlZ2VyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tSW50ZWdlcihtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdlbmVyYXRlUmFuZG9tV29yZHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21Xb3JkcyhudW0pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyR3b3Jkc1BlclNlbnRlbmMgPSB0aGlzLndvcmRzUGVyU2VudGVuY2UsXG4gICAgICAgICAgbWluID0gX3RoaXMkd29yZHNQZXJTZW50ZW5jLm1pbixcbiAgICAgICAgICBtYXggPSBfdGhpcyR3b3Jkc1BlclNlbnRlbmMubWF4O1xuICAgICAgdmFyIGxlbmd0aCA9IG51bSB8fCB0aGlzLmdlbmVyYXRlUmFuZG9tSW50ZWdlcihtaW4sIG1heCk7XG4gICAgICByZXR1cm4gKDAsIF91dGlsLm1ha2VBcnJheU9mTGVuZ3RoKShsZW5ndGgpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChfdGhpcy5wbHVja1JhbmRvbVdvcmQoKSwgXCIgXCIpLmNvbmNhdChhY2N1bXVsYXRvcik7XG4gICAgICB9LCBcIlwiKS50cmltKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdlbmVyYXRlUmFuZG9tU2VudGVuY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21TZW50ZW5jZShudW0pIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCgoMCwgX3V0aWwuY2FwaXRhbGl6ZSkodGhpcy5nZW5lcmF0ZVJhbmRvbVdvcmRzKG51bSkpLCBcIi5cIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdlbmVyYXRlUmFuZG9tUGFyYWdyYXBoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tUGFyYWdyYXBoKG51bSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRzZW50ZW5jZXNQZXJQYXIgPSB0aGlzLnNlbnRlbmNlc1BlclBhcmFncmFwaCxcbiAgICAgICAgICBtaW4gPSBfdGhpcyRzZW50ZW5jZXNQZXJQYXIubWluLFxuICAgICAgICAgIG1heCA9IF90aGlzJHNlbnRlbmNlc1BlclBhci5tYXg7XG4gICAgICB2YXIgbGVuZ3RoID0gbnVtIHx8IHRoaXMuZ2VuZXJhdGVSYW5kb21JbnRlZ2VyKG1pbiwgbWF4KTtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwubWFrZUFycmF5T2ZMZW5ndGgpKGxlbmd0aCkucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KF90aGlzMi5nZW5lcmF0ZVJhbmRvbVNlbnRlbmNlKCksIFwiIFwiKS5jb25jYXQoYWNjdW11bGF0b3IpO1xuICAgICAgfSwgXCJcIikudHJpbSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbHVja1JhbmRvbVdvcmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGx1Y2tSYW5kb21Xb3JkKCkge1xuICAgICAgdmFyIG1pbiA9IDA7XG4gICAgICB2YXIgbWF4ID0gdGhpcy53b3Jkcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZW5lcmF0ZVJhbmRvbUludGVnZXIobWluLCBtYXgpO1xuICAgICAgcmV0dXJuIHRoaXMud29yZHNbaW5kZXhdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHZW5lcmF0b3I7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IEdlbmVyYXRvcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SkhaVzVsY21GMGIzSWlMQ0p6Wlc1MFpXNWpaWE5RWlhKUVlYSmhaM0poY0dnaUxDSnRZWGdpTENKdGFXNGlMQ0ozYjNKa2MxQmxjbE5sYm5SbGJtTmxJaXdpY21GdVpHOXRJaXdpYzJWbFpDSXNJbmR2Y21Seklpd2lWMDlTUkZNaUxDSkZjbkp2Y2lJc0lrMWhkR2dpTENKbWJHOXZjaUlzSW01MWJTSXNJbXhsYm1kMGFDSXNJbWRsYm1WeVlYUmxVbUZ1Wkc5dFNXNTBaV2RsY2lJc0ltMWhhMlZCY25KaGVVOW1UR1Z1WjNSb0lpd2ljbVZrZFdObElpd2lZV05qZFcxMWJHRjBiM0lpTENKcGJtUmxlQ0lzSW5Cc2RXTnJVbUZ1Wkc5dFYyOXlaQ0lzSW5SeWFXMGlMQ0pqWVhCcGRHRnNhWHBsSWl3aVoyVnVaWEpoZEdWU1lXNWtiMjFYYjNKa2N5SXNJbWRsYm1WeVlYUmxVbUZ1Wkc5dFUyVnVkR1Z1WTJVaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YkdsaUwyZGxibVZ5WVhSdmNpNTBjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZXlCWFQxSkVVeUI5SUdaeWIyMGdYQ0l1TGk5amIyNXpkR0Z1ZEhNdmQyOXlaSE5jSWp0Y2NseHVhVzF3YjNKMElIc2dZMkZ3YVhSaGJHbDZaU3dnYldGclpVRnljbUY1VDJaTVpXNW5kR2dnZlNCbWNtOXRJRndpTGk0dmRYUnBiRndpTzF4eVhHNWNjbHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JKUW05MWJtUnpJSHRjY2x4dUlDQnRhVzQ2SUc1MWJXSmxjanRjY2x4dUlDQnRZWGc2SUc1MWJXSmxjanRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUhSNWNHVWdTVkJ5Ym1jZ1BTQW9LU0E5UGlCdWRXMWlaWEk3WEhKY2JseHlYRzVsZUhCdmNuUWdkSGx3WlNCSlUyVmxaRkpoYm1SdmJTQTlJRzVsZHlBb2MyVmxaRDg2SUhOMGNtbHVaeWtnUFQ0Z1NWQnlibWM3WEhKY2JseHlYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRWxOWVhSb0lIdGNjbHh1SUNCelpXVmtjbUZ1Wkc5dE9pQkpVMlZsWkZKaGJtUnZiVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCSlIyVnVaWEpoZEc5eVQzQjBhVzl1Y3lCN1hISmNiaUFnYzJWdWRHVnVZMlZ6VUdWeVVHRnlZV2R5WVhCb1B6b2dTVUp2ZFc1a2N6dGNjbHh1SUNCM2IzSmtjMUJsY2xObGJuUmxibU5sUHpvZ1NVSnZkVzVrY3p0Y2NseHVJQ0J5WVc1a2IyMC9PaUJKVUhKdVp6dGNjbHh1SUNCelpXVmtQem9nYzNSeWFXNW5PMXh5WEc0Z0lIZHZjbVJ6UHpvZ2MzUnlhVzVuVzEwN1hISmNibjFjY2x4dVhISmNibU5zWVhOeklFZGxibVZ5WVhSdmNpQjdYSEpjYmlBZ2NIVmliR2xqSUhObGJuUmxibU5sYzFCbGNsQmhjbUZuY21Gd2FEb2dTVUp2ZFc1a2N6dGNjbHh1SUNCd2RXSnNhV01nZDI5eVpITlFaWEpUWlc1MFpXNWpaVG9nU1VKdmRXNWtjenRjY2x4dUlDQndkV0pzYVdNZ2NtRnVaRzl0T2lCSlVISnVaenRjY2x4dUlDQndkV0pzYVdNZ2QyOXlaSE02SUhOMGNtbHVaMXRkTzF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaDdYSEpjYmlBZ0lDQnpaVzUwWlc1alpYTlFaWEpRWVhKaFozSmhjR2dnUFNCN0lHMWhlRG9nTnl3Z2JXbHVPaUF6SUgwc1hISmNiaUFnSUNCM2IzSmtjMUJsY2xObGJuUmxibU5sSUQwZ2V5QnRZWGc2SURFMUxDQnRhVzQ2SURVZ2ZTeGNjbHh1SUNBZ0lISmhibVJ2YlN4Y2NseHVJQ0FnSUhObFpXUXNYSEpjYmlBZ0lDQjNiM0prY3lBOUlGZFBVa1JUTEZ4eVhHNGdJSDA2SUVsSFpXNWxjbUYwYjNKUGNIUnBiMjV6SUQwZ2UzMHBJSHRjY2x4dUlDQWdJR2xtSUNoelpXNTBaVzVqWlhOUVpYSlFZWEpoWjNKaGNHZ3ViV2x1SUQ0Z2MyVnVkR1Z1WTJWelVHVnlVR0Z5WVdkeVlYQm9MbTFoZUNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZRTFwYm1sdGRXMGdiblZ0WW1WeUlHOW1JSE5sYm5SbGJtTmxjeUJ3WlhJZ2NHRnlZV2R5WVhCb0lDZ2tlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2MyVnVkR1Z1WTJWelVHVnlVR0Z5WVdkeVlYQm9MbTFwYmx4eVhHNGdJQ0FnSUNBZ0lIMHBJR05oYm01dmRDQmxlR05sWldRZ2JXRjRhVzExYlNBb0pIdHpaVzUwWlc1alpYTlFaWEpRWVhKaFozSmhjR2d1YldGNGZTa3VZQ3hjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnBaaUFvZDI5eVpITlFaWEpUWlc1MFpXNWpaUzV0YVc0Z1BpQjNiM0prYzFCbGNsTmxiblJsYm1ObExtMWhlQ2tnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFMXBibWx0ZFcwZ2JuVnRZbVZ5SUc5bUlIZHZjbVJ6SUhCbGNpQnpaVzUwWlc1alpTQW9KSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIZHZjbVJ6VUdWeVUyVnVkR1Z1WTJVdWJXbHVYSEpjYmlBZ0lDQWdJQ0FnZlNrZ1kyRnVibTkwSUdWNFkyVmxaQ0J0WVhocGJYVnRJQ2drZTNkdmNtUnpVR1Z5VTJWdWRHVnVZMlV1YldGNGZTa3VZQ3hjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TG5ObGJuUmxibU5sYzFCbGNsQmhjbUZuY21Gd2FDQTlJSE5sYm5SbGJtTmxjMUJsY2xCaGNtRm5jbUZ3YUR0Y2NseHVJQ0FnSUhSb2FYTXVkMjl5WkhNZ1BTQjNiM0prY3p0Y2NseHVJQ0FnSUhSb2FYTXVkMjl5WkhOUVpYSlRaVzUwWlc1alpTQTlJSGR2Y21SelVHVnlVMlZ1ZEdWdVkyVTdYSEpjYmlBZ0lDQjBhR2x6TG5KaGJtUnZiU0E5SUhKaGJtUnZiU0I4ZkNCTllYUm9MbkpoYm1SdmJUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lIQjFZbXhwWXlCblpXNWxjbUYwWlZKaGJtUnZiVWx1ZEdWblpYSW9iV2x1T2lCdWRXMWlaWElzSUcxaGVEb2diblZ0WW1WeUtUb2diblZ0WW1WeUlIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbVpzYjI5eUtIUm9hWE11Y21GdVpHOXRLQ2tnS2lBb2JXRjRJQzBnYldsdUlDc2dNU2tnS3lCdGFXNHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjSFZpYkdsaklHZGxibVZ5WVhSbFVtRnVaRzl0VjI5eVpITW9iblZ0UHpvZ2JuVnRZbVZ5S1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSHNnYldsdUxDQnRZWGdnZlNBOUlIUm9hWE11ZDI5eVpITlFaWEpUWlc1MFpXNWpaVHRjY2x4dUlDQWdJR052Ym5OMElHeGxibWQwYUNBOUlHNTFiU0I4ZkNCMGFHbHpMbWRsYm1WeVlYUmxVbUZ1Wkc5dFNXNTBaV2RsY2lodGFXNHNJRzFoZUNrN1hISmNiaUFnSUNCeVpYUjFjbTRnYldGclpVRnljbUY1VDJaTVpXNW5kR2dvYkdWdVozUm9LVnh5WEc0Z0lDQWdJQ0F1Y21Wa2RXTmxLQ2hoWTJOMWJYVnNZWFJ2Y2pvZ2MzUnlhVzVuTENCcGJtUmxlRG9nYm5WdFltVnlLVG9nYzNSeWFXNW5JRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lDUjdkR2hwY3k1d2JIVmphMUpoYm1SdmJWZHZjbVFvS1gwZ0pIdGhZMk4xYlhWc1lYUnZjbjFnTzF4eVhHNGdJQ0FnSUNCOUxDQmNJbHdpS1Z4eVhHNGdJQ0FnSUNBdWRISnBiU2dwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0hWaWJHbGpJR2RsYm1WeVlYUmxVbUZ1Wkc5dFUyVnVkR1Z1WTJVb2JuVnRQem9nYm5WdFltVnlLVG9nYzNSeWFXNW5JSHRjY2x4dUlDQWdJSEpsZEhWeWJpQmdKSHRqWVhCcGRHRnNhWHBsS0hSb2FYTXVaMlZ1WlhKaGRHVlNZVzVrYjIxWGIzSmtjeWh1ZFcwcEtYMHVZRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEIxWW14cFl5Qm5aVzVsY21GMFpWSmhibVJ2YlZCaGNtRm5jbUZ3YUNodWRXMC9PaUJ1ZFcxaVpYSXBPaUJ6ZEhKcGJtY2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2V5QnRhVzRzSUcxaGVDQjlJRDBnZEdocGN5NXpaVzUwWlc1alpYTlFaWEpRWVhKaFozSmhjR2c3WEhKY2JpQWdJQ0JqYjI1emRDQnNaVzVuZEdnZ1BTQnVkVzBnZkh3Z2RHaHBjeTVuWlc1bGNtRjBaVkpoYm1SdmJVbHVkR1ZuWlhJb2JXbHVMQ0J0WVhncE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUcxaGEyVkJjbkpoZVU5bVRHVnVaM1JvS0d4bGJtZDBhQ2xjY2x4dUlDQWdJQ0FnTG5KbFpIVmpaU2dvWVdOamRXMTFiR0YwYjNJNklITjBjbWx1Wnl3Z2FXNWtaWGc2SUc1MWJXSmxjaWs2SUhOMGNtbHVaeUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHQWtlM1JvYVhNdVoyVnVaWEpoZEdWU1lXNWtiMjFUWlc1MFpXNWpaU2dwZlNBa2UyRmpZM1Z0ZFd4aGRHOXlmV0E3WEhKY2JpQWdJQ0FnSUgwc0lGd2lYQ0lwWEhKY2JpQWdJQ0FnSUM1MGNtbHRLQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3ZFdKc2FXTWdjR3gxWTJ0U1lXNWtiMjFYYjNKa0tDazZJSE4wY21sdVp5QjdYSEpjYmlBZ0lDQmpiMjV6ZENCdGFXNGdQU0F3TzF4eVhHNGdJQ0FnWTI5dWMzUWdiV0Y0SUQwZ2RHaHBjeTUzYjNKa2N5NXNaVzVuZEdnZ0xTQXhPMXh5WEc0Z0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCMGFHbHpMbWRsYm1WeVlYUmxVbUZ1Wkc5dFNXNTBaV2RsY2lodGFXNHNJRzFoZUNrN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTNiM0prYzF0cGJtUmxlRjA3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JIWlc1bGNtRjBiM0k3WEhKY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVGQk96dEJRVU5CT3pzN096czdPenM3TzBsQmRVSk5RU3hUTzBWQlRVb3NjVUpCVFRKQ08wbEJRVUVzSzBWQlFVb3NSVUZCU1R0SlFVRkJMR2xEUVV4NlFrTXNjVUpCUzNsQ08wbEJRVUVzU1VGTWVrSkJMSEZDUVV0NVFpeHpRMEZNUkR0TlFVRkZReXhIUVVGSExFVkJRVVVzUTBGQlVEdE5RVUZWUXl4SFFVRkhMRVZCUVVVN1NVRkJaaXhEUVV0RE8wbEJRVUVzYVVOQlNucENReXhuUWtGSmVVSTdTVUZCUVN4SlFVcDZRa0VzWjBKQlNYbENMSE5EUVVwT08wMUJRVVZHTEVkQlFVY3NSVUZCUlN4RlFVRlFPMDFCUVZkRExFZEJRVWNzUlVGQlJUdEpRVUZvUWl4RFFVbE5PMGxCUVVFc1NVRklla0pGTEUxQlIzbENMRkZCU0hwQ1FTeE5RVWQ1UWp0SlFVRkJMRWxCUm5wQ1F5eEpRVVY1UWl4UlFVWjZRa0VzU1VGRmVVSTdTVUZCUVN4elFrRkVla0pETEV0QlEzbENPMGxCUVVFc1NVRkVla0pCTEV0QlEzbENMREpDUVVScVFrTXNXVUZEYVVJN08wbEJRVUU3TzBsQlFVRTdPMGxCUVVFN08wbEJRVUU3TzBsQlFVRTdPMGxCUTNwQ0xFbEJRVWxRTEhGQ1FVRnhRaXhEUVVGRFJTeEhRVUYwUWl4SFFVRTBRa1lzY1VKQlFYRkNMRU5CUVVORExFZEJRWFJFTEVWQlFUSkVPMDFCUTNwRUxFMUJRVTBzU1VGQlNVOHNTMEZCU2l4elJFRkZSbElzY1VKQlFYRkNMRU5CUVVORkxFZEJSbkJDTEhORFFVZDNRa1lzY1VKQlFYRkNMRU5CUVVORExFZEJTRGxETEZGQlFVNDdTVUZMUkRzN1NVRkZSQ3hKUVVGSlJTeG5Ra0ZCWjBJc1EwRkJRMFFzUjBGQmFrSXNSMEZCZFVKRExHZENRVUZuUWl4RFFVRkRSaXhIUVVFMVF5eEZRVUZwUkR0TlFVTXZReXhOUVVGTkxFbEJRVWxQTEV0QlFVb3NhVVJCUlVaTUxHZENRVUZuUWl4RFFVRkRSQ3hIUVVabUxITkRRVWQzUWtNc1owSkJRV2RDTEVOQlFVTkdMRWRCU0hwRExGRkJRVTQ3U1VGTFJEczdTVUZGUkN4TFFVRkxSQ3h4UWtGQlRDeEhRVUUyUWtFc2NVSkJRVGRDTzBsQlEwRXNTMEZCUzAwc1MwRkJUQ3hIUVVGaFFTeExRVUZpTzBsQlEwRXNTMEZCUzBnc1owSkJRVXdzUjBGQmQwSkJMR2RDUVVGNFFqdEpRVU5CTEV0QlFVdERMRTFCUVV3c1IwRkJZMEVzVFVGQlRTeEpRVUZKU3l4SlFVRkpMRU5CUVVOTUxFMUJRVGRDTzBWQlEwUTdPenM3VjBGRlJDd3JRa0ZCTmtKR0xFZEJRVGRDTEVWQlFUQkRSQ3hIUVVFeFF5eEZRVUVyUkR0TlFVTTNSQ3hQUVVGUFVTeEpRVUZKTEVOQlFVTkRMRXRCUVV3c1EwRkJWeXhMUVVGTFRpeE5RVUZNTEUxQlFXbENTQ3hIUVVGSExFZEJRVWRETEVkQlFVNHNSMEZCV1N4RFFVRTNRaXhKUVVGclEwRXNSMEZCTjBNc1EwRkJVRHRKUVVORU96czdWMEZGUkN3MlFrRkJNa0pUTEVkQlFUTkNMRVZCUVdsRU8wMUJRVUU3TzAxQlF5OURMRFJDUVVGeFFpeExRVUZMVWl4blFrRkJNVUk3VFVGQlFTeEpRVUZSUkN4SFFVRlNMSGxDUVVGUlFTeEhRVUZTTzAxQlFVRXNTVUZCWVVRc1IwRkJZaXg1UWtGQllVRXNSMEZCWWp0TlFVTkJMRWxCUVUxWExFMUJRVTBzUjBGQlIwUXNSMEZCUnl4SlFVRkpMRXRCUVV0RkxIRkNRVUZNTEVOQlFUSkNXQ3hIUVVFelFpeEZRVUZuUTBRc1IwRkJhRU1zUTBGQmRFSTdUVUZEUVN4UFFVRlBMRWxCUVVGaExIVkNRVUZCTEVWQlFXdENSaXhOUVVGc1FpeEZRVU5LUnl4TlFVUkpMRU5CUTBjc1ZVRkJRME1zVjBGQlJDeEZRVUZ6UWtNc1MwRkJkRUlzUlVGQlowUTdVVUZEZEVRc2FVSkJRVlVzUzBGQlNTeERRVUZEUXl4bFFVRk1MRVZCUVZZc1kwRkJiME5HTEZkQlFYQkRPMDFCUTBRc1EwRklTU3hGUVVkR0xFVkJTRVVzUlVGSlNrY3NTVUZLU1N4RlFVRlFPMGxCUzBRN096dFhRVVZFTEdkRFFVRTRRbElzUjBGQk9VSXNSVUZCYjBRN1RVRkRiRVFzYVVKQlFWVXNTVUZCUVZNc1owSkJRVUVzUlVGQlZ5eExRVUZMUXl4dFFrRkJUQ3hEUVVGNVFsWXNSMEZCZWtJc1EwRkJXQ3hEUVVGV08wbEJRMFE3T3p0WFFVVkVMR2xEUVVFclFrRXNSMEZCTDBJc1JVRkJjVVE3VFVGQlFUczdUVUZEYmtRc05FSkJRWEZDTEV0QlFVdFlMSEZDUVVFeFFqdE5RVUZCTEVsQlFWRkZMRWRCUVZJc2VVSkJRVkZCTEVkQlFWSTdUVUZCUVN4SlFVRmhSQ3hIUVVGaUxIbENRVUZoUVN4SFFVRmlPMDFCUTBFc1NVRkJUVmNzVFVGQlRTeEhRVUZIUkN4SFFVRkhMRWxCUVVrc1MwRkJTMFVzY1VKQlFVd3NRMEZCTWtKWUxFZEJRVE5DTEVWQlFXZERSQ3hIUVVGb1F5eERRVUYwUWp0TlFVTkJMRTlCUVU4c1NVRkJRV0VzZFVKQlFVRXNSVUZCYTBKR0xFMUJRV3hDTEVWQlEwcEhMRTFCUkVrc1EwRkRSeXhWUVVGRFF5eFhRVUZFTEVWQlFYTkNReXhMUVVGMFFpeEZRVUZuUkR0UlFVTjBSQ3hwUWtGQlZTeE5RVUZKTEVOQlFVTkxMSE5DUVVGTUxFVkJRVllzWTBGQk1rTk9MRmRCUVRORE8wMUJRMFFzUTBGSVNTeEZRVWRHTEVWQlNFVXNSVUZKU2tjc1NVRktTU3hGUVVGUU8wbEJTMFE3T3p0WFFVVkVMREpDUVVGcFF6dE5RVU12UWl4SlFVRk5ha0lzUjBGQlJ5eEhRVUZITEVOQlFWbzdUVUZEUVN4SlFVRk5SQ3hIUVVGSExFZEJRVWNzUzBGQlMwc3NTMEZCVEN4RFFVRlhUU3hOUVVGWUxFZEJRVzlDTEVOQlFXaERPMDFCUTBFc1NVRkJUVXNzUzBGQlN5eEhRVUZITEV0QlFVdEtMSEZDUVVGTUxFTkJRVEpDV0N4SFFVRXpRaXhGUVVGblEwUXNSMEZCYUVNc1EwRkJaRHROUVVOQkxFOUJRVThzUzBGQlMwc3NTMEZCVEN4RFFVRlhWeXhMUVVGWUxFTkJRVkE3U1VGRFJEczdPenM3TzJWQlIxbHNRaXhUSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbi8qKlxyXG4gKiBAcGFyYW0gc3RyICBBIHN0cmluZyB0aGF0IG1heSBvciBtYXkgbm90IGJlIGNhcGl0YWxpemVkLlxyXG4gKiBAcmV0dXJucyAgICBBIGNhcGl0YWxpemVkIHN0cmluZy5cclxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIHZhciB0cmltbWVkID0gc3RyLnRyaW0oKTtcbiAgcmV0dXJuIHRyaW1tZWQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0cmltbWVkLnNsaWNlKDEpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gY2FwaXRhbGl6ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmpZWEJwZEdGc2FYcGxJaXdpYzNSeUlpd2lkSEpwYlcxbFpDSXNJblJ5YVcwaUxDSmphR0Z5UVhRaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW5Oc2FXTmxJbDBzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzVjBhV3d2WTJGd2FYUmhiR2w2WlM1MGN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2NseHVJQ29nUUhCaGNtRnRJSE4wY2lBZ1FTQnpkSEpwYm1jZ2RHaGhkQ0J0WVhrZ2IzSWdiV0Y1SUc1dmRDQmlaU0JqWVhCcGRHRnNhWHBsWkM1Y2NseHVJQ29nUUhKbGRIVnlibk1nSUNBZ1FTQmpZWEJwZEdGc2FYcGxaQ0J6ZEhKcGJtY3VYSEpjYmlBcUwxeHlYRzVqYjI1emRDQmpZWEJwZEdGc2FYcGxJRDBnS0hOMGNqb2djM1J5YVc1bktUb2djM1J5YVc1bklEMCtJSHRjY2x4dUlDQmpiMjV6ZENCMGNtbHRiV1ZrSUQwZ2MzUnlMblJ5YVcwb0tUdGNjbHh1SUNCeVpYUjFjbTRnZEhKcGJXMWxaQzVqYUdGeVFYUW9NQ2t1ZEc5VmNIQmxja05oYzJVb0tTQXJJSFJ5YVcxdFpXUXVjMnhwWTJVb01TazdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqWVhCcGRHRnNhWHBsTzF4eVhHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVUxQkxGVkJRVlVzUjBGQlJ5eFRRVUZpUVN4VlFVRmhMRU5CUVVORExFZEJRVVFzUlVGQmVVSTdSVUZETVVNc1NVRkJUVU1zVDBGQlR5eEhRVUZIUkN4SFFVRkhMRU5CUVVORkxFbEJRVW9zUlVGQmFFSTdSVUZEUVN4UFFVRlBSQ3hQUVVGUExFTkJRVU5GTEUxQlFWSXNRMEZCWlN4RFFVRm1MRVZCUVd0Q1F5eFhRVUZzUWl4TFFVRnJRMGdzVDBGQlR5eERRVUZEU1N4TFFVRlNMRU5CUVdNc1EwRkJaQ3hEUVVGNlF6dEJRVU5FTEVOQlNFUTdPMlZCUzJWT0xGVWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYXBpdGFsaXplXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jYXBpdGFsaXplW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc05vZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lzTm9kZVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNSZWFjdE5hdGl2ZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaXNSZWFjdE5hdGl2ZVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNXaW5kb3dzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pc1dpbmRvd3NbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1ha2VBcnJheU9mTGVuZ3RoXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9tYWtlQXJyYXlPZkxlbmd0aFtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZUFycmF5T2ZTdHJpbmdzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9tYWtlQXJyYXlPZlN0cmluZ3NbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcblxudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYXBpdGFsaXplXCIpKTtcblxudmFyIF9pc05vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzTm9kZVwiKSk7XG5cbnZhciBfaXNSZWFjdE5hdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNSZWFjdE5hdGl2ZVwiKSk7XG5cbnZhciBfaXNXaW5kb3dzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd3NcIikpO1xuXG52YXIgX21ha2VBcnJheU9mTGVuZ3RoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tYWtlQXJyYXlPZkxlbmd0aFwiKSk7XG5cbnZhciBfbWFrZUFycmF5T2ZTdHJpbmdzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tYWtlQXJyYXlPZlN0cmluZ3NcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2VzEwc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMM1YwYVd3dmFXNWtaWGd1ZEhNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElHTmhjR2wwWVd4cGVtVWdabkp2YlNCY0lpNHZZMkZ3YVhSaGJHbDZaVndpTzF4eVhHNXBiWEJ2Y25RZ2FYTk9iMlJsSUdaeWIyMGdYQ0l1TDJselRtOWtaVndpTzF4eVhHNXBiWEJ2Y25RZ2FYTlNaV0ZqZEU1aGRHbDJaU0JtY205dElGd2lMaTlwYzFKbFlXTjBUbUYwYVhabFhDSTdYSEpjYm1sdGNHOXlkQ0JwYzFkcGJtUnZkM01nWm5KdmJTQmNJaTR2YVhOWGFXNWtiM2R6WENJN1hISmNibWx0Y0c5eWRDQnRZV3RsUVhKeVlYbFBaa3hsYm1kMGFDQm1jbTl0SUZ3aUxpOXRZV3RsUVhKeVlYbFBaa3hsYm1kMGFGd2lPMXh5WEc1cGJYQnZjblFnYldGclpVRnljbUY1VDJaVGRISnBibWR6SUdaeWIyMGdYQ0l1TDIxaGEyVkJjbkpoZVU5bVUzUnlhVzVuYzF3aU8xeHlYRzVjY2x4dVpYaHdiM0owSUh0Y2NseHVJQ0JqWVhCcGRHRnNhWHBsTEZ4eVhHNGdJR2x6VG05a1pTeGNjbHh1SUNCcGMxSmxZV04wVG1GMGFYWmxMRnh5WEc0Z0lHbHpWMmx1Wkc5M2N5eGNjbHh1SUNCdFlXdGxRWEp5WVhsUFpreGxibWQwYUN4Y2NseHVJQ0J0WVd0bFFYSnlZWGxQWmxOMGNtbHVaM01zWEhKY2JuMDdYSEpjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVUU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG4vKipcclxuICogQHJldHVybnMgIFRydWUgaWYgdGhlIHJ1bnRpbWUgaXMgTm9kZUpTLlxyXG4gKi9cbnZhciBpc05vZGUgPSBmdW5jdGlvbiBpc05vZGUoKSB7XG4gIHJldHVybiB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmICEhbW9kdWxlLmV4cG9ydHM7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBpc05vZGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXeUpwYzA1dlpHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzVjBhV3d2YVhOT2IyUmxMblJ6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh5WEc0Z0tpQkFjbVYwZFhKdWN5QWdWSEoxWlNCcFppQjBhR1VnY25WdWRHbHRaU0JwY3lCT2IyUmxTbE11WEhKY2JpQXFMMXh5WEc1amIyNXpkQ0JwYzA1dlpHVWdQU0FvS1RvZ1ltOXZiR1ZoYmlBOVBpQjdYSEpjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ0YjJSMWJHVWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnSVNGdGIyUjFiR1V1Wlhod2IzSjBjenRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdselRtOWtaVHRjY2x4dUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlRVRXNUVUZCVFN4SFFVRkhMRk5CUVZSQkxFMUJRVk1zUjBGQlpUdEZRVU0xUWl4UFFVRlBMRTlCUVU5RExFMUJRVkFzUzBGQmEwSXNWMEZCYkVJc1NVRkJhVU1zUTBGQlF5eERRVUZEUVN4TlFVRk5MRU5CUVVORExFOUJRV3BFTzBGQlEwUXNRMEZHUkRzN1pVRkpaVVlzVFNKOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbi8qKlxyXG4gKiBDaGVjayBpZiBydW50aW1lIGlzIFJlYWN0TmF0aXZlLlxyXG4gKiBTb2x1dGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20va25pY2tsYWJzL2xvcmVtLWlwc3VtLmpzL3B1bGwvNTIvZmlsZXNcclxuICpcclxuICogQHJldHVybnMgIFRydWUgaWYgcnVudGltZSBpcyBSZWFjdE5hdGl2ZS5cclxuICovXG52YXIgaXNSZWFjdE5hdGl2ZSA9IGZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XG4gIHZhciBpc1JlYWN0TmF0aXZlUmVzdWx0ID0gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICBpc1JlYWN0TmF0aXZlUmVzdWx0ID0gbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlzUmVhY3ROYXRpdmVSZXN1bHQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1JlYWN0TmF0aXZlUmVzdWx0O1xufTtcblxudmFyIF9kZWZhdWx0ID0gaXNSZWFjdE5hdGl2ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SnBjMUpsWVdOMFRtRjBhWFpsSWl3aWFYTlNaV0ZqZEU1aGRHbDJaVkpsYzNWc2RDSXNJbTVoZG1sbllYUnZjaUlzSW5CeWIyUjFZM1FpTENKbElsMHNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNWMGFXd3ZhWE5TWldGamRFNWhkR2wyWlM1MGN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2NseHVJQ29nUTJobFkyc2dhV1lnY25WdWRHbHRaU0JwY3lCU1pXRmpkRTVoZEdsMlpTNWNjbHh1SUNvZ1UyOXNkWFJwYjI0Z1ltRnpaV1FnYjI0Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwydHVhV05yYkdGaWN5OXNiM0psYlMxcGNITjFiUzVxY3k5d2RXeHNMelV5TDJacGJHVnpYSEpjYmlBcVhISmNiaUFxSUVCeVpYUjFjbTV6SUNCVWNuVmxJR2xtSUhKMWJuUnBiV1VnYVhNZ1VtVmhZM1JPWVhScGRtVXVYSEpjYmlBcUwxeHlYRzVqYjI1emRDQnBjMUpsWVdOMFRtRjBhWFpsSUQwZ0tDazZJR0p2YjJ4bFlXNGdQVDRnZTF4eVhHNGdJR3hsZENCcGMxSmxZV04wVG1GMGFYWmxVbVZ6ZFd4ME9pQmliMjlzWldGdUlEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lIUnllU0I3WEhKY2JpQWdJQ0JwYzFKbFlXTjBUbUYwYVhabFVtVnpkV3gwSUQwZ2JtRjJhV2RoZEc5eUxuQnliMlIxWTNRZ1BUMDlJRndpVW1WaFkzUk9ZWFJwZG1WY0lqdGNjbHh1SUNCOUlHTmhkR05vSUNobEtTQjdYSEpjYmlBZ0lDQnBjMUpsWVdOMFRtRjBhWFpsVW1WemRXeDBJRDBnWm1Gc2MyVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnlaWFIxY200Z2FYTlNaV0ZqZEU1aGRHbDJaVkpsYzNWc2REdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR2x6VW1WaFkzUk9ZWFJwZG1VN1hISmNiaUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVMUJMR0ZCUVdFc1IwRkJSeXhUUVVGb1FrRXNZVUZCWjBJc1IwRkJaVHRGUVVOdVF5eEpRVUZKUXl4dFFrRkJORUlzUjBGQlJ5eExRVUZ1UXpzN1JVRkZRU3hKUVVGSk8wbEJRMFpCTEcxQ1FVRnRRaXhIUVVGSFF5eFRRVUZUTEVOQlFVTkRMRTlCUVZZc1MwRkJjMElzWVVGQk5VTTdSVUZEUkN4RFFVWkVMRU5CUlVVc1QwRkJUME1zUTBGQlVDeEZRVUZWTzBsQlExWklMRzFDUVVGdFFpeEhRVUZITEV0QlFYUkNPMFZCUTBRN08wVkJSVVFzVDBGQlQwRXNiVUpCUVZBN1FVRkRSQ3hEUVZaRU96dGxRVmxsUkN4aEluMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3BsYXRmb3JtcyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvcGxhdGZvcm1zXCIpO1xuXG4vKipcclxuICogQHJldHVybnMgVHJ1ZSBpZiBwcm9jZXNzIGlzIHdpbmRvd3MuXHJcbiAqL1xudmFyIGlzV2luZG93cyA9IGZ1bmN0aW9uIGlzV2luZG93cygpIHtcbiAgdmFyIGlzV2luZG93c1Jlc3VsdCA9IGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgaXNXaW5kb3dzUmVzdWx0ID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gX3BsYXRmb3Jtcy5TVVBQT1JURURfUExBVEZPUk1TLldJTjMyO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaXNXaW5kb3dzUmVzdWx0ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNXaW5kb3dzUmVzdWx0O1xufTtcblxudmFyIF9kZWZhdWx0ID0gaXNXaW5kb3dzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKcGMxZHBibVJ2ZDNNaUxDSnBjMWRwYm1SdmQzTlNaWE4xYkhRaUxDSndjbTlqWlhOeklpd2ljR3hoZEdadmNtMGlMQ0pUVlZCUVQxSlVSVVJmVUV4QlZFWlBVazFUSWl3aVYwbE9NeklpTENKbElsMHNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNWMGFXd3ZhWE5YYVc1a2IzZHpMblJ6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lGTlZVRkJQVWxSRlJGOVFURUZVUms5U1RWTWdmU0JtY205dElGd2lMaTR2WTI5dWMzUmhiblJ6TDNCc1lYUm1iM0p0YzF3aU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFQnlaWFIxY201eklGUnlkV1VnYVdZZ2NISnZZMlZ6Y3lCcGN5QjNhVzVrYjNkekxseHlYRzRnS2k5Y2NseHVZMjl1YzNRZ2FYTlhhVzVrYjNkeklEMGdLQ2s2SUdKdmIyeGxZVzRnUFQ0Z2UxeHlYRzRnSUd4bGRDQnBjMWRwYm1SdmQzTlNaWE4xYkhRNklHSnZiMnhsWVc0Z1BTQm1ZV3h6WlR0Y2NseHVJQ0IwY25rZ2UxeHlYRzRnSUNBZ2FYTlhhVzVrYjNkelVtVnpkV3gwSUQwZ2NISnZZMlZ6Y3k1d2JHRjBabTl5YlNBOVBUMGdVMVZRVUU5U1ZFVkVYMUJNUVZSR1QxSk5VeTVYU1U0ek1qdGNjbHh1SUNCOUlHTmhkR05vSUNobEtTQjdYSEpjYmlBZ0lDQnBjMWRwYm1SdmQzTlNaWE4xYkhRZ1BTQm1ZV3h6WlR0Y2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlHbHpWMmx1Wkc5M2MxSmxjM1ZzZER0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElHbHpWMmx1Wkc5M2N6dGNjbHh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJUVUVzVTBGQlV5eEhRVUZITEZOQlFWcEJMRk5CUVZrc1IwRkJaVHRGUVVNdlFpeEpRVUZKUXl4bFFVRjNRaXhIUVVGSExFdEJRUzlDT3p0RlFVTkJMRWxCUVVrN1NVRkRSa0VzWlVGQlpTeEhRVUZIUXl4UFFVRlBMRU5CUVVORExGRkJRVklzUzBGQmNVSkRMRGhDUVVGQkxFTkJRVzlDUXl4TFFVRXpSRHRGUVVORUxFTkJSa1FzUTBGRlJTeFBRVUZQUXl4RFFVRlFMRVZCUVZVN1NVRkRWa3dzWlVGQlpTeEhRVUZITEV0QlFXeENPMFZCUTBRN08wVkJRMFFzVDBGQlQwRXNaVUZCVUR0QlFVTkVMRU5CVWtRN08yVkJWV1ZFTEZNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG4vKipcclxuICogQHBhcmFtIGxlbmd0aCBMZW5ndGggXCJ4XCIuXHJcbiAqIEByZXR1cm5zICAgICAgQW4gYXJyYXkgb2YgaW5kZXhlcyBvZiBsZW5ndGggXCJ4XCIuXHJcbiAqL1xudmFyIG1ha2VBcnJheU9mTGVuZ3RoID0gZnVuY3Rpb24gbWFrZUFycmF5T2ZMZW5ndGgoKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gIHJldHVybiBBcnJheS5hcHBseShudWxsLCBBcnJheShsZW5ndGgpKS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IG1ha2VBcnJheU9mTGVuZ3RoO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKdFlXdGxRWEp5WVhsUFpreGxibWQwYUNJc0lteGxibWQwYUNJc0lrRnljbUY1SWl3aVlYQndiSGtpTENKdFlYQWlMQ0pwZEdWdElpd2lhVzVrWlhnaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12ZFhScGJDOXRZV3RsUVhKeVlYbFBaa3hsYm1kMGFDNTBjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNjbHh1SUNvZ1FIQmhjbUZ0SUd4bGJtZDBhQ0JNWlc1bmRHZ2dYQ0o0WENJdVhISmNiaUFxSUVCeVpYUjFjbTV6SUNBZ0lDQWdRVzRnWVhKeVlYa2diMllnYVc1a1pYaGxjeUJ2WmlCc1pXNW5kR2dnWENKNFhDSXVYSEpjYmlBcUwxeHlYRzVqYjI1emRDQnRZV3RsUVhKeVlYbFBaa3hsYm1kMGFDQTlJQ2hzWlc1bmRHZzZJRzUxYldKbGNpQTlJREFwT2lCdWRXMWlaWEpiWFNBOVBpQjdYSEpjYmlBZ2NtVjBkWEp1SUVGeWNtRjVMbUZ3Y0d4NUtHNTFiR3dzSUVGeWNtRjVLR3hsYm1kMGFDa3BMbTFoY0NoY2NseHVJQ0FnSUNocGRHVnRPaUJoYm5rc0lHbHVaR1Y0T2lCdWRXMWlaWElwT2lCdWRXMWlaWElnUFQ0Z2FXNWtaWGdzWEhKY2JpQWdLVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUcxaGEyVkJjbkpoZVU5bVRHVnVaM1JvTzF4eVhHNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVUxQkxHbENRVUZwUWl4SFFVRkhMRk5CUVhCQ1FTeHBRa0ZCYjBJc1IwRkJhME03UlVGQlFTeEpRVUZxUTBNc1RVRkJhVU1zZFVWQlFXaENMRU5CUVdkQ08wVkJRekZFTEU5QlFVOURMRXRCUVVzc1EwRkJRME1zUzBGQlRpeERRVUZaTEVsQlFWb3NSVUZCYTBKRUxFdEJRVXNzUTBGQlEwUXNUVUZCUkN4RFFVRjJRaXhGUVVGcFEwY3NSMEZCYWtNc1EwRkRUQ3hWUVVGRFF5eEpRVUZFTEVWQlFWbERMRXRCUVZvN1NVRkJRU3hQUVVGelEwRXNTMEZCZEVNN1JVRkJRU3hEUVVSTExFTkJRVkE3UVVGSFJDeERRVXBFT3p0bFFVMWxUaXhwUWlKOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfbWFrZUFycmF5T2ZMZW5ndGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21ha2VBcnJheU9mTGVuZ3RoXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8qKlxyXG4gKiBAcGFyYW0gbGVuZ3RoICBMZW5ndGggXCJ4XCIuXHJcbiAqIEByZXR1cm5zICAgICAgIEFuIGFycmF5IG9mIHN0cmluZ3Mgb2YgbGVuZ3RoIFwieFwiLlxyXG4gKi9cbnZhciBtYWtlQXJyYXlPZlN0cmluZ3MgPSBmdW5jdGlvbiBtYWtlQXJyYXlPZlN0cmluZ3MobGVuZ3RoLCBtYWtlU3RyaW5nKSB7XG4gIHZhciBhcnIgPSAoMCwgX21ha2VBcnJheU9mTGVuZ3RoW1wiZGVmYXVsdFwiXSkobGVuZ3RoKTtcbiAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYWtlU3RyaW5nKCk7XG4gIH0pO1xufTtcblxudmFyIF9kZWZhdWx0ID0gbWFrZUFycmF5T2ZTdHJpbmdzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKdFlXdGxRWEp5WVhsUFpsTjBjbWx1WjNNaUxDSnNaVzVuZEdnaUxDSnRZV3RsVTNSeWFXNW5JaXdpWVhKeUlpd2liV0ZyWlVGeWNtRjVUMlpNWlc1bmRHZ2lMQ0p0WVhBaVhTd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12ZFhScGJDOXRZV3RsUVhKeVlYbFBabE4wY21sdVozTXVkSE1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUcxaGEyVkJjbkpoZVU5bVRHVnVaM1JvSUdaeWIyMGdYQ0l1TDIxaGEyVkJjbkpoZVU5bVRHVnVaM1JvWENJN1hISmNiaThxS2x4eVhHNGdLaUJBY0dGeVlXMGdiR1Z1WjNSb0lDQk1aVzVuZEdnZ1hDSjRYQ0l1WEhKY2JpQXFJRUJ5WlhSMWNtNXpJQ0FnSUNBZ0lFRnVJR0Z5Y21GNUlHOW1JSE4wY21sdVozTWdiMllnYkdWdVozUm9JRndpZUZ3aUxseHlYRzRnS2k5Y2NseHVZMjl1YzNRZ2JXRnJaVUZ5Y21GNVQyWlRkSEpwYm1keklEMGdLRnh5WEc0Z0lHeGxibWQwYURvZ2JuVnRZbVZ5TEZ4eVhHNGdJRzFoYTJWVGRISnBibWM2SUNncElEMCtJSE4wY21sdVp5eGNjbHh1S1RvZ2MzUnlhVzVuVzEwZ1BUNGdlMXh5WEc0Z0lHTnZibk4wSUdGeWNpQTlJRzFoYTJWQmNuSmhlVTltVEdWdVozUm9LR3hsYm1kMGFDazdYSEpjYmlBZ2NtVjBkWEp1SUdGeWNpNXRZWEFvS0NrZ1BUNGdiV0ZyWlZOMGNtbHVaeWdwS1R0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElHMWhhMlZCY25KaGVVOW1VM1J5YVc1bmN6dGNjbHh1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRVUU3T3pzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVMUJMR3RDUVVGclFpeEhRVUZITEZOQlFYSkNRU3hyUWtGQmNVSXNRMEZEZWtKRExFMUJSSGxDTEVWQlJYcENReXhWUVVaNVFpeEZRVWRhTzBWQlEySXNTVUZCVFVNc1IwRkJSeXhIUVVGSExFbEJRVUZETERaQ1FVRkJMRVZCUVd0Q1NDeE5RVUZzUWl4RFFVRmFPMFZCUTBFc1QwRkJUMFVzUjBGQlJ5eERRVUZEUlN4SFFVRktMRU5CUVZFN1NVRkJRU3hQUVVGTlNDeFZRVUZWTEVWQlFXaENPMFZCUVVFc1EwRkJVaXhEUVVGUU8wRkJRMFFzUTBGT1JEczdaVUZSWlVZc2EwSWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJmdW5jdGlvbiBuYXZJdGVtKHRleHQpIHtcbiAgICBsZXQgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGl0ZW0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIGl0ZW0uaWQgPSB0ZXh0O1xuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcIm5hdkl0ZW1cIik7XG5cbiAgICByZXR1cm4gaXRlbTtcbn1cblxuZXhwb3J0IHtuYXZJdGVtfSIsImltcG9ydCB7IExvcmVtSXBzdW0sIGxvcmVtSXBzdW0gfSBmcm9tIFwibG9yZW0taXBzdW1cIjtcblxuZnVuY3Rpb24gYXJ0aWNsZUhlYWRlcih0KSB7XG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgIHRleHQuY2xhc3NOYW1lID0gXCJhcnRpY2xlLWhlYWRlclwiO1xuICAgIHRleHQudGV4dENvbnRlbnQgPSB0O1xuICAgIHJldHVybiB0ZXh0O1xufVxuXG5mdW5jdGlvbiBoZWFkZXJCb2R5KCkge1xuICAgIGNvbnN0IGxvcmVtID0gbmV3IExvcmVtSXBzdW0oe1xuICAgICAgICBzZW50ZW5jZXNQZXJQYXJhZ3JhcGg6IHtcbiAgICAgICAgICBtYXg6IDgsXG4gICAgICAgICAgbWluOiA0XG4gICAgICAgIH0sXG4gICAgICAgIHdvcmRzUGVyU2VudGVuY2U6IHtcbiAgICAgICAgICBtYXg6IDE2LFxuICAgICAgICAgIG1pbjogNFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cobG9yZW0uZ2VuZXJhdGVQYXJhZ3JhcGhzKDEpKVxuICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIHRleHQudGV4dENvbnRlbnQgPSBsb3JlbS5nZW5lcmF0ZVBhcmFncmFwaHMoMSk7XG4gICAgcmV0dXJuIHRleHQ7XG59XG5cbmZ1bmN0aW9uIG5ld0NvbnRhaW5lcih0KSB7XG4gICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcIndyYXBwZXJcIlxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChhcnRpY2xlSGVhZGVyKHQpKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyQm9keSgpKTtcbiAgICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5leHBvcnQge25ld0NvbnRhaW5lcn07IiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmltcG9ydCBkaXNwbGF5TmF2IGZyb20gXCIuL2NvbXBvbmVudHMvbmF2YmFyLmpzXCI7XG5pbXBvcnQgc2hvd0hvbWUgZnJvbSBcIi4vY29tcG9uZW50cy9ob21lcGFnZS5qc1wiO1xuXG5mdW5jdGlvbiBzaG93RGVmYXVsdCgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoZGlzcGxheU5hdigpKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoc2hvd0hvbWUoKSk7XG59XG4vL2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChzaG93SG9tZSgpKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBzaG93RGVmYXVsdCk7IiwiaW1wb3J0IHsgbmF2SXRlbSB9IGZyb20gJy4vbmF2aXRlbS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BsYXlOYXYoKSB7XG4gICAgbGV0IG5hdmJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG5hdmJhci5jbGFzc05hbWUgPSBcIm5hdmJhclwiO1xuXG4gICAgbmF2YmFyLmFwcGVuZENoaWxkKG5hdkl0ZW0oXCJIb21lXCIpKTtcbiAgICBuYXZiYXIuYXBwZW5kQ2hpbGQobmF2SXRlbShcIk1lbnVcIikpO1xuICAgIG5hdmJhci5hcHBlbmRDaGlsZChuYXZJdGVtKFwiQWJvdXRcIikpO1xuXG4gICAgcmV0dXJuIG5hdmJhcjtcbn0iLCJpbXBvcnQgdGl0bGUgZnJvbSBcIi4vaG9tZXBhZ2UtZXhjbHVzaXZlLmpzL3RpdGxlLmpzXCI7XG5pbXBvcnQgeyBuZXdDb250YWluZXIgfSBmcm9tIFwiLi9hcnRpY2xlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNob3dIb21lKCkge1xuICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaWQgPSAnbWlkJztcblxuICAgIGRpdi5hcHBlbmRDaGlsZCh0aXRsZShcIk5pa28gJiBLbG9ub2EncyBDb2ZmZWUgVGF2ZXJuXCIpKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQobmV3Q29udGFpbmVyKFwiR2V0IHJlYWR5IHRvIHNheSAnV0FIT08hJyB3aGVuIHlvdSB0YXN0ZSBvdXIgYnJldyFcIikpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChuZXdDb250YWluZXIoXCJPdXIgU3RvcnkhXCIpKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQobmV3Q29udGFpbmVyKFwiQ29tZSBjaGVjayB1cyBvdXQhXCIpKTtcblxuICAgIHJldHVybiBkaXY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGl0bGUodGV4dCkge1xuICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgdGl0bGUuY2xhc3NOYW1lID0gJ3RpdGxlJztcblxuICAgIHRpdGxlLnRleHRDb250ZW50ID0gdGV4dDtcblxuICAgIHJldHVybiB0aXRsZTtcbn0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIkZPUk1BVF9QTEFJTiIsIkZPUk1BVF9IVE1MIiwiRk9STUFUUyIsIkxJTkVfRU5ESU5HUyIsIlBPU0lYIiwiV0lOMzIiLCJTVVBQT1JURURfUExBVEZPUk1TIiwiREFSV0lOIiwiTElOVVgiLCJVTklUX1dPUkRTIiwiVU5JVF9XT1JEIiwiVU5JVF9TRU5URU5DRVMiLCJVTklUX1NFTlRFTkNFIiwiVU5JVF9QQVJBR1JBUEhTIiwiVU5JVF9QQVJBR1JBUEgiLCJVTklUUyIsIldPUkRTIiwiZW51bWVyYWJsZSIsImdldCIsIl9Mb3JlbUlwc3VtIiwib2JqIiwiX2Zvcm1hdHMiLCJfbGluZUVuZGluZ3MiLCJfZ2VuZXJhdG9yIiwiX3V0aWwiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5IiwiTG9yZW1JcHN1bSIsImFyZ3VtZW50cyIsImZvcm1hdCIsInN1ZmZpeCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJpbmRleE9mIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImdlbmVyYXRvciIsInByb3RvUHJvcHMiLCJpc1JlYWN0TmF0aXZlIiwiaXNOb2RlIiwiaXNXaW5kb3dzIiwic3RyIiwic3RyaW5ncyIsIl90aGlzIiwiZm9ybWF0U3RyaW5nIiwibnVtIiwiZ2VuZXJhdGVSYW5kb21Xb3JkcyIsImdlbmVyYXRlUmFuZG9tUGFyYWdyYXBoIiwibWFrZVN0cmluZyIsImJpbmQiLCJmb3JtYXRTdHJpbmdzIiwibWFrZUFycmF5T2ZTdHJpbmdzIiwiZ2V0TGluZUVuZGluZyIsInByb3RvdHlwZSIsIl9kZWZhdWx0IiwiX3dvcmRzIiwiR2VuZXJhdG9yIiwiX3JlZiIsIl9yZWYkc2VudGVuY2VzUGVyUGFyYSIsInNlbnRlbmNlc1BlclBhcmFncmFwaCIsIm1heCIsIm1pbiIsIl9yZWYkd29yZHNQZXJTZW50ZW5jZSIsIndvcmRzUGVyU2VudGVuY2UiLCJyYW5kb20iLCJfcmVmJHdvcmRzIiwic2VlZCIsIndvcmRzIiwiTWF0aCIsImZsb29yIiwiX3RoaXMkd29yZHNQZXJTZW50ZW5jIiwiZ2VuZXJhdGVSYW5kb21JbnRlZ2VyIiwibWFrZUFycmF5T2ZMZW5ndGgiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImluZGV4IiwicGx1Y2tSYW5kb21Xb3JkIiwidHJpbSIsImNhcGl0YWxpemUiLCJfdGhpczIiLCJfdGhpcyRzZW50ZW5jZXNQZXJQYXIiLCJnZW5lcmF0ZVJhbmRvbVNlbnRlbmNlIiwidHJpbW1lZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiX2NhcGl0YWxpemUiLCJfaXNOb2RlIiwiX2lzUmVhY3ROYXRpdmUiLCJfaXNXaW5kb3dzIiwiX21ha2VBcnJheU9mTGVuZ3RoIiwiX21ha2VBcnJheU9mU3RyaW5ncyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJpc1JlYWN0TmF0aXZlUmVzdWx0IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImUiLCJfcGxhdGZvcm1zIiwiaXNXaW5kb3dzUmVzdWx0IiwicHJvY2VzcyIsInBsYXRmb3JtIiwiQXJyYXkiLCJhcHBseSIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwibmF2SXRlbSIsInRleHQiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsIm5ld0NvbnRhaW5lciIsInQiLCJjb250YWluZXIiLCJjbGFzc05hbWUiLCJhcnRpY2xlSGVhZGVyIiwibG9yZW0iLCJjb25zb2xlIiwibG9nIiwiZ2VuZXJhdGVQYXJhZ3JhcGhzIiwiaGVhZGVyQm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJuYXZiYXIiLCJkaXNwbGF5TmF2IiwiZGl2IiwidGl0bGUiLCJzaG93SG9tZSJdLCJzb3VyY2VSb290IjoiIn0=