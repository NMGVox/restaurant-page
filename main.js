(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),s=t(667),c=t.n(s),d=new URL(t(472),t.b),u=new URL(t(704),t.b),l=i()(a()),f=c()(d),A=c()(u);l.push([e.id,"@font-face {\n    font-family: 'crossaint-one';\n    src: url("+f+");\n    letter-spacing: 2px;\n    font-size: 2.5rem;\n    font-weight: 700;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 16px;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\n\nbody {\n    position: relative;\n    min-height: 100vh;\n    /* overflow-x:hidden; */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-image: url("+A+");\n    background-size: 100vw 200vh;\n}\n\n.navbar {\n    top: 0;\n    width:100%;\n    position: sticky;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(160, 160, 160);\n    height: 6vh;\n    gap: 10vw;\n    padding: 0 10vw;\n    box-sizing: border-box;\n    border-bottom: 2px solid rgba(0, 0, 0, 0.671);\n}\n\n.navItem {\n    font-weight: bold;\n    text-decoration: underline;\n}\n\n#mid {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    align-items: center;\n    box-sizing: border-box;\n    background-color: rgba(41, 123, 218, 0.349);\n    min-height: 50%;\n    width:60%;\n    font-family: 'crossaint-one', sans-serif;\n}\n\n.title {\n    font-size: 4rem;\n    text-align: center;\n    width: 60%;\n    margin-top: 2rem;\n    color: rgba(22, 5, 3, 0.897);\n    -webkit-text-stroke: 6px;\n    -webkit-text-stroke-color: rgba(0, 0, 0, 0.363);\n}\n\n.wrapper {\n    padding: 1rem 2rem;\n    box-sizing:border-box;\n    border-style: solid;\n    border-color: black;\n    border-width: 4px;\n    border-radius: 20px;\n    width: 60%;\n    height:auto;\n    text-align: center;\n}\n\n.article-header {\n    font-family: 'crossaint-one', sans-serif;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n\np {\n    font-family: sans-serif;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,4BAA4B;IAC5B,4CAA4C;IAC5C,mBAAmB;IACnB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;;AAEA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,yDAAqD;IACrD,4BAA4B;AAChC;;AAEA;IACI,MAAM;IACN,UAAU;IACV,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,oCAAoC;IACpC,WAAW;IACX,SAAS;IACT,eAAe;IACf,sBAAsB;IACtB,6CAA6C;AACjD;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;IACnB,sBAAsB;IACtB,2CAA2C;IAC3C,eAAe;IACf,SAAS;IACT,wCAAwC;AAC5C;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,UAAU;IACV,gBAAgB;IAChB,4BAA4B;IAC5B,wBAAwB;IACxB,+CAA+C;AACnD;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,mBAAmB;IACnB,iBAAiB;IACjB,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,wCAAwC;IACxC,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:["@font-face {\n    font-family: 'crossaint-one';\n    src: url('./fonts/CroissantOne-Regular.otf');\n    letter-spacing: 2px;\n    font-size: 2.5rem;\n    font-weight: 700;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 16px;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\n\nbody {\n    position: relative;\n    min-height: 100vh;\n    /* overflow-x:hidden; */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-image: url('./images/cool-restaurant.jpg');\n    background-size: 100vw 200vh;\n}\n\n.navbar {\n    top: 0;\n    width:100%;\n    position: sticky;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(160, 160, 160);\n    height: 6vh;\n    gap: 10vw;\n    padding: 0 10vw;\n    box-sizing: border-box;\n    border-bottom: 2px solid rgba(0, 0, 0, 0.671);\n}\n\n.navItem {\n    font-weight: bold;\n    text-decoration: underline;\n}\n\n#mid {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    align-items: center;\n    box-sizing: border-box;\n    background-color: rgba(41, 123, 218, 0.349);\n    min-height: 50%;\n    width:60%;\n    font-family: 'crossaint-one', sans-serif;\n}\n\n.title {\n    font-size: 4rem;\n    text-align: center;\n    width: 60%;\n    margin-top: 2rem;\n    color: rgba(22, 5, 3, 0.897);\n    -webkit-text-stroke: 6px;\n    -webkit-text-stroke-color: rgba(0, 0, 0, 0.363);\n}\n\n.wrapper {\n    padding: 1rem 2rem;\n    box-sizing:border-box;\n    border-style: solid;\n    border-color: black;\n    border-width: 4px;\n    border-radius: 20px;\n    width: 60%;\n    height:auto;\n    text-align: center;\n}\n\n.article-header {\n    font-family: 'crossaint-one', sans-serif;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n\np {\n    font-family: sans-serif;\n}"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var u=[].concat(e[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},731:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.FORMAT_PLAIN=n.FORMAT_HTML=n.FORMATS=void 0;var t="html";n.FORMAT_HTML=t;var r="plain";n.FORMAT_PLAIN=r;var a=[t,r];n.FORMATS=a},670:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LINE_ENDINGS=void 0,n.LINE_ENDINGS={POSIX:"\n",WIN32:"\r\n"}},3:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SUPPORTED_PLATFORMS=void 0,n.SUPPORTED_PLATFORMS={DARWIN:"darwin",LINUX:"linux",WIN32:"win32"}},755:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.UNIT_WORDS=n.UNIT_WORD=n.UNIT_SENTENCES=n.UNIT_SENTENCE=n.UNIT_PARAGRAPHS=n.UNIT_PARAGRAPH=n.UNITS=void 0;var t="words";n.UNIT_WORDS=t;var r="word";n.UNIT_WORD=r;var a="sentences";n.UNIT_SENTENCES=a;var o="sentence";n.UNIT_SENTENCE=o;var i="paragraphs";n.UNIT_PARAGRAPHS=i;var s="paragraph";n.UNIT_PARAGRAPH=s;var c=[t,r,a,o,i,s];n.UNITS=c},749:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.WORDS=void 0,n.WORDS=["ad","adipisicing","aliqua","aliquip","amet","anim","aute","cillum","commodo","consectetur","consequat","culpa","cupidatat","deserunt","do","dolor","dolore","duis","ea","eiusmod","elit","enim","esse","est","et","eu","ex","excepteur","exercitation","fugiat","id","in","incididunt","ipsum","irure","labore","laboris","laborum","Lorem","magna","minim","mollit","nisi","non","nostrud","nulla","occaecat","officia","pariatur","proident","qui","quis","reprehenderit","sint","sit","sunt","tempor","ullamco","ut","velit","veniam","voluptate"]},380:(e,n,t)=>{Object.defineProperty(n,"Ap",{enumerable:!0,get:function(){return a.default}});t(731),t(755),t(749);var r,a=(r=t(935))&&r.__esModule?r:{default:r}},935:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,a=t(731),o=t(670),i=(r=t(140))&&r.__esModule?r:{default:r},s=t(270);function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.FORMAT_PLAIN,r=arguments.length>2?arguments[2]:void 0;if(function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.format=t,this.suffix=r,function(e,n,t){n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t}(this,"generator",void 0),-1===a.FORMATS.indexOf(t.toLowerCase()))throw new Error("".concat(t," is an invalid format. Please use ").concat(a.FORMATS.join(" or "),"."));this.generator=new i.default(n)}var n,t;return n=e,(t=[{key:"getLineEnding",value:function(){return this.suffix?this.suffix:!(0,s.isReactNative)()&&(0,s.isNode)()&&(0,s.isWindows)()?o.LINE_ENDINGS.WIN32:o.LINE_ENDINGS.POSIX}},{key:"formatString",value:function(e){return this.format===a.FORMAT_HTML?"<p>".concat(e,"</p>"):e}},{key:"formatStrings",value:function(e){var n=this;return e.map((function(e){return n.formatString(e)}))}},{key:"generateWords",value:function(e){return this.formatString(this.generator.generateRandomWords(e))}},{key:"generateSentences",value:function(e){return this.formatString(this.generator.generateRandomParagraph(e))}},{key:"generateParagraphs",value:function(e){var n=this.generator.generateRandomParagraph.bind(this.generator);return this.formatStrings((0,s.makeArrayOfStrings)(e,n)).join(this.getLineEnding())}}])&&c(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),e}(),u=d;n.default=u},140:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(749),a=t(270);function o(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var s=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.sentencesPerParagraph,a=void 0===t?{max:7,min:3}:t,o=n.wordsPerSentence,s=void 0===o?{max:15,min:5}:o,c=n.random,d=(n.seed,n.words),u=void 0===d?r.WORDS:d;if(function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"sentencesPerParagraph",void 0),i(this,"wordsPerSentence",void 0),i(this,"random",void 0),i(this,"words",void 0),a.min>a.max)throw new Error("Minimum number of sentences per paragraph (".concat(a.min,") cannot exceed maximum (").concat(a.max,")."));if(s.min>s.max)throw new Error("Minimum number of words per sentence (".concat(s.min,") cannot exceed maximum (").concat(s.max,")."));this.sentencesPerParagraph=a,this.words=u,this.wordsPerSentence=s,this.random=c||Math.random}var n,t;return n=e,(t=[{key:"generateRandomInteger",value:function(e,n){return Math.floor(this.random()*(n-e+1)+e)}},{key:"generateRandomWords",value:function(e){var n=this,t=this.wordsPerSentence,r=t.min,o=t.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,t){return"".concat(n.pluckRandomWord()," ").concat(e)}),"").trim()}},{key:"generateRandomSentence",value:function(e){return"".concat((0,a.capitalize)(this.generateRandomWords(e)),".")}},{key:"generateRandomParagraph",value:function(e){var n=this,t=this.sentencesPerParagraph,r=t.min,o=t.max,i=e||this.generateRandomInteger(r,o);return(0,a.makeArrayOfLength)(i).reduce((function(e,t){return"".concat(n.generateRandomSentence()," ").concat(e)}),"").trim()}},{key:"pluckRandomWord",value:function(){var e=this.words.length-1,n=this.generateRandomInteger(0,e);return this.words[n]}}])&&o(n.prototype,t),Object.defineProperty(n,"prototype",{writable:!1}),e}();n.default=s},827:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(e){var n=e.trim();return n.charAt(0).toUpperCase()+n.slice(1)}},270:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(n,"isNode",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(n,"isReactNative",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"isWindows",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"makeArrayOfLength",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(n,"makeArrayOfStrings",{enumerable:!0,get:function(){return c.default}});var r=d(t(827)),a=d(t(984)),o=d(t(97)),i=d(t(606)),s=d(t(318)),c=d(t(490));function d(e){return e&&e.__esModule?e:{default:e}}},984:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){return!!e.exports}},97:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=!1;try{e="ReactNative"===navigator.product}catch(n){e=!1}return e}},606:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(3);n.default=function(){var e=!1;try{e=process.platform===r.SUPPORTED_PLATFORMS.WIN32}catch(n){e=!1}return e}},318:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Array.apply(null,Array(e)).map((function(e,n){return n}))}},490:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,a=(r=t(318))&&r.__esModule?r:{default:r};n.default=function(e,n){return(0,a.default)(e).map((function(){return n()}))}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var f=t(l),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)n[f].references++,n[f].updater(A);else{var p=a(A,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),d=0;d<o.length;d++){var u=t(o[d]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},472:(e,n,t)=>{e.exports=t.p+"426bbd6f3affefa7200c.otf"},704:(e,n,t)=>{e.exports=t.p+"1bc31cce4f37f16602d6.jpg"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),d=t(216),u=t.n(d),l=t(589),f=t.n(l),A=t(426),p={};function m(e){let n=document.createElement("div");return n.textContent=e,n.id=e,n.classList.add("navItem"),n}p.styleTagTransform=f(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),n()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;var g=t(380);function h(e){let n=document.createElement("div");return n.className="wrapper",n.appendChild(function(e){let n=document.createElement("h1");return n.className="article-header",n.textContent=e,n}(e)),n.appendChild(function(){const e=new g.Ap({sentencesPerParagraph:{max:8,min:4},wordsPerSentence:{max:16,min:4}});console.log(e.generateParagraphs(1));let n=document.createElement("p");return n.textContent=e.generateParagraphs(1),n}()),n}window.addEventListener("load",(function(){document.querySelector("body").appendChild(function(){let e=document.createElement("div");return e.className="navbar",e.appendChild(m("Home")),e.appendChild(m("Menu")),e.appendChild(m("About")),e}()),document.querySelector("body").appendChild(function(){let e=document.createElement("div");return e.id="mid",e.appendChild(function(e){let n=document.createElement("h1");return n.className="title",n.textContent="Niko & Klonoa's Coffee Tavern",n}()),e.appendChild(h("Get ready to say 'WAHOO!' when you taste our brew!")),e.appendChild(h("Our Story!")),e.appendChild(h("Come check us out!")),e}())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,